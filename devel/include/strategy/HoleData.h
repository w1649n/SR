// Generated by gencpp from file strategy/HoleData.msg
// DO NOT EDIT!


#ifndef STRATEGY_MESSAGE_HOLEDATA_H
#define STRATEGY_MESSAGE_HOLEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace strategy
{
template <class ContainerAllocator>
struct HoleData_
{
  typedef HoleData_<ContainerAllocator> Type;

  HoleData_()
    : Hole_x0Flag(false)
    , Hole_x1Flag(false)
    , Hole_y0Flag(false)
    , Hole_y1Flag(false)
    , AviodHole(false)
    , Hole_Leftx1(0)
    , Hole_Rightx1(0)  {
    }
  HoleData_(const ContainerAllocator& _alloc)
    : Hole_x0Flag(false)
    , Hole_x1Flag(false)
    , Hole_y0Flag(false)
    , Hole_y1Flag(false)
    , AviodHole(false)
    , Hole_Leftx1(0)
    , Hole_Rightx1(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Hole_x0Flag_type;
  _Hole_x0Flag_type Hole_x0Flag;

   typedef uint8_t _Hole_x1Flag_type;
  _Hole_x1Flag_type Hole_x1Flag;

   typedef uint8_t _Hole_y0Flag_type;
  _Hole_y0Flag_type Hole_y0Flag;

   typedef uint8_t _Hole_y1Flag_type;
  _Hole_y1Flag_type Hole_y1Flag;

   typedef uint8_t _AviodHole_type;
  _AviodHole_type AviodHole;

   typedef int16_t _Hole_Leftx1_type;
  _Hole_Leftx1_type Hole_Leftx1;

   typedef int16_t _Hole_Rightx1_type;
  _Hole_Rightx1_type Hole_Rightx1;





  typedef boost::shared_ptr< ::strategy::HoleData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::strategy::HoleData_<ContainerAllocator> const> ConstPtr;

}; // struct HoleData_

typedef ::strategy::HoleData_<std::allocator<void> > HoleData;

typedef boost::shared_ptr< ::strategy::HoleData > HoleDataPtr;
typedef boost::shared_ptr< ::strategy::HoleData const> HoleDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::strategy::HoleData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::strategy::HoleData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::strategy::HoleData_<ContainerAllocator1> & lhs, const ::strategy::HoleData_<ContainerAllocator2> & rhs)
{
  return lhs.Hole_x0Flag == rhs.Hole_x0Flag &&
    lhs.Hole_x1Flag == rhs.Hole_x1Flag &&
    lhs.Hole_y0Flag == rhs.Hole_y0Flag &&
    lhs.Hole_y1Flag == rhs.Hole_y1Flag &&
    lhs.AviodHole == rhs.AviodHole &&
    lhs.Hole_Leftx1 == rhs.Hole_Leftx1 &&
    lhs.Hole_Rightx1 == rhs.Hole_Rightx1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::strategy::HoleData_<ContainerAllocator1> & lhs, const ::strategy::HoleData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace strategy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::strategy::HoleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::strategy::HoleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::strategy::HoleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::strategy::HoleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy::HoleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy::HoleData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::strategy::HoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "380c01d203c040afdfacfd0eed390e9e";
  }

  static const char* value(const ::strategy::HoleData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x380c01d203c040afULL;
  static const uint64_t static_value2 = 0xdfacfd0eed390e9eULL;
};

template<class ContainerAllocator>
struct DataType< ::strategy::HoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "strategy/HoleData";
  }

  static const char* value(const ::strategy::HoleData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::strategy::HoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool Hole_x0Flag\n"
"bool Hole_x1Flag\n"
"bool Hole_y0Flag\n"
"bool Hole_y1Flag\n"
"bool AviodHole\n"
"int16 Hole_Leftx1\n"
"int16 Hole_Rightx1\n"
;
  }

  static const char* value(const ::strategy::HoleData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::strategy::HoleData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Hole_x0Flag);
      stream.next(m.Hole_x1Flag);
      stream.next(m.Hole_y0Flag);
      stream.next(m.Hole_y1Flag);
      stream.next(m.AviodHole);
      stream.next(m.Hole_Leftx1);
      stream.next(m.Hole_Rightx1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HoleData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::strategy::HoleData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::strategy::HoleData_<ContainerAllocator>& v)
  {
    s << indent << "Hole_x0Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Hole_x0Flag);
    s << indent << "Hole_x1Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Hole_x1Flag);
    s << indent << "Hole_y0Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Hole_y0Flag);
    s << indent << "Hole_y1Flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Hole_y1Flag);
    s << indent << "AviodHole: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AviodHole);
    s << indent << "Hole_Leftx1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Hole_Leftx1);
    s << indent << "Hole_Rightx1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Hole_Rightx1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRATEGY_MESSAGE_HOLEDATA_H
