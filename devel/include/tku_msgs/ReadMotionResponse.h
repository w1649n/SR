// Generated by gencpp from file tku_msgs/ReadMotionResponse.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_READMOTIONRESPONSE_H
#define TKU_MSGS_MESSAGE_READMOTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct ReadMotionResponse_
{
  typedef ReadMotionResponse_<ContainerAllocator> Type;

  ReadMotionResponse_()
    : VectorCnt(0)
    , motionstate()
    , ID()
    , MotionList()
    , RelativeData()
    , AbsoluteData()  {
    }
  ReadMotionResponse_(const ContainerAllocator& _alloc)
    : VectorCnt(0)
    , motionstate(_alloc)
    , ID(_alloc)
    , MotionList(_alloc)
    , RelativeData(_alloc)
    , AbsoluteData(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _VectorCnt_type;
  _VectorCnt_type VectorCnt;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _motionstate_type;
  _motionstate_type motionstate;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _ID_type;
  _ID_type ID;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _MotionList_type;
  _MotionList_type MotionList;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _RelativeData_type;
  _RelativeData_type RelativeData;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _AbsoluteData_type;
  _AbsoluteData_type AbsoluteData;





  typedef boost::shared_ptr< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReadMotionResponse_

typedef ::tku_msgs::ReadMotionResponse_<std::allocator<void> > ReadMotionResponse;

typedef boost::shared_ptr< ::tku_msgs::ReadMotionResponse > ReadMotionResponsePtr;
typedef boost::shared_ptr< ::tku_msgs::ReadMotionResponse const> ReadMotionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::ReadMotionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::ReadMotionResponse_<ContainerAllocator1> & lhs, const ::tku_msgs::ReadMotionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.VectorCnt == rhs.VectorCnt &&
    lhs.motionstate == rhs.motionstate &&
    lhs.ID == rhs.ID &&
    lhs.MotionList == rhs.MotionList &&
    lhs.RelativeData == rhs.RelativeData &&
    lhs.AbsoluteData == rhs.AbsoluteData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::ReadMotionResponse_<ContainerAllocator1> & lhs, const ::tku_msgs::ReadMotionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9be25567668b09a6560656233265f235";
  }

  static const char* value(const ::tku_msgs::ReadMotionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9be25567668b09a6ULL;
  static const uint64_t static_value2 = 0x560656233265f235ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/ReadMotionResponse";
  }

  static const char* value(const ::tku_msgs::ReadMotionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 VectorCnt\n"
"int16[] motionstate\n"
"int16[] ID\n"
"int16[] MotionList\n"
"int16[] RelativeData\n"
"int16[] AbsoluteData\n"
"\n"
;
  }

  static const char* value(const ::tku_msgs::ReadMotionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.VectorCnt);
      stream.next(m.motionstate);
      stream.next(m.ID);
      stream.next(m.MotionList);
      stream.next(m.RelativeData);
      stream.next(m.AbsoluteData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadMotionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::ReadMotionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::ReadMotionResponse_<ContainerAllocator>& v)
  {
    s << indent << "VectorCnt: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VectorCnt);
    s << indent << "motionstate[]" << std::endl;
    for (size_t i = 0; i < v.motionstate.size(); ++i)
    {
      s << indent << "  motionstate[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.motionstate[i]);
    }
    s << indent << "ID[]" << std::endl;
    for (size_t i = 0; i < v.ID.size(); ++i)
    {
      s << indent << "  ID[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.ID[i]);
    }
    s << indent << "MotionList[]" << std::endl;
    for (size_t i = 0; i < v.MotionList.size(); ++i)
    {
      s << indent << "  MotionList[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.MotionList[i]);
    }
    s << indent << "RelativeData[]" << std::endl;
    for (size_t i = 0; i < v.RelativeData.size(); ++i)
    {
      s << indent << "  RelativeData[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.RelativeData[i]);
    }
    s << indent << "AbsoluteData[]" << std::endl;
    for (size_t i = 0; i < v.AbsoluteData.size(); ++i)
    {
      s << indent << "  AbsoluteData[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.AbsoluteData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_READMOTIONRESPONSE_H
