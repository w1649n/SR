// Generated by gencpp from file tku_msgs/SaveMotion.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SAVEMOTION_H
#define TKU_MSGS_MESSAGE_SAVEMOTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/MultiArrayLayout.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct SaveMotion_
{
  typedef SaveMotion_<ContainerAllocator> Type;

  SaveMotion_()
    : layout()
    , name()
    , motionstate(0)
    , ID(0)
    , savestate(0)
    , saveflag(false)
    , MotionList()
    , MotorData()  {
    }
  SaveMotion_(const ContainerAllocator& _alloc)
    : layout(_alloc)
    , name(_alloc)
    , motionstate(0)
    , ID(0)
    , savestate(0)
    , saveflag(false)
    , MotionList(_alloc)
    , MotorData(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::MultiArrayLayout_<ContainerAllocator>  _layout_type;
  _layout_type layout;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int16_t _motionstate_type;
  _motionstate_type motionstate;

   typedef int16_t _ID_type;
  _ID_type ID;

   typedef int16_t _savestate_type;
  _savestate_type savestate;

   typedef uint8_t _saveflag_type;
  _saveflag_type saveflag;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _MotionList_type;
  _MotionList_type MotionList;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _MotorData_type;
  _MotorData_type MotorData;





  typedef boost::shared_ptr< ::tku_msgs::SaveMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SaveMotion_<ContainerAllocator> const> ConstPtr;

}; // struct SaveMotion_

typedef ::tku_msgs::SaveMotion_<std::allocator<void> > SaveMotion;

typedef boost::shared_ptr< ::tku_msgs::SaveMotion > SaveMotionPtr;
typedef boost::shared_ptr< ::tku_msgs::SaveMotion const> SaveMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SaveMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SaveMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SaveMotion_<ContainerAllocator1> & lhs, const ::tku_msgs::SaveMotion_<ContainerAllocator2> & rhs)
{
  return lhs.layout == rhs.layout &&
    lhs.name == rhs.name &&
    lhs.motionstate == rhs.motionstate &&
    lhs.ID == rhs.ID &&
    lhs.savestate == rhs.savestate &&
    lhs.saveflag == rhs.saveflag &&
    lhs.MotionList == rhs.MotionList &&
    lhs.MotorData == rhs.MotorData;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SaveMotion_<ContainerAllocator1> & lhs, const ::tku_msgs::SaveMotion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SaveMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SaveMotion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SaveMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SaveMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SaveMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SaveMotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SaveMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51a8597bb88713732b738b54bba08066";
  }

  static const char* value(const ::tku_msgs::SaveMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51a8597bb8871373ULL;
  static const uint64_t static_value2 = 0x2b738b54bba08066ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SaveMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SaveMotion";
  }

  static const char* value(const ::tku_msgs::SaveMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SaveMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/MultiArrayLayout layout\n"
"string name\n"
"int16 motionstate\n"
"int16 ID\n"
"int16 savestate\n"
"bool saveflag\n"
"int16[] MotionList\n"
"int16[] MotorData\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::tku_msgs::SaveMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SaveMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layout);
      stream.next(m.name);
      stream.next(m.motionstate);
      stream.next(m.ID);
      stream.next(m.savestate);
      stream.next(m.saveflag);
      stream.next(m.MotionList);
      stream.next(m.MotorData);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SaveMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SaveMotion_<ContainerAllocator>& v)
  {
    s << indent << "layout: ";
    s << std::endl;
    Printer< ::std_msgs::MultiArrayLayout_<ContainerAllocator> >::stream(s, indent + "  ", v.layout);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "motionstate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motionstate);
    s << indent << "ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "savestate: ";
    Printer<int16_t>::stream(s, indent + "  ", v.savestate);
    s << indent << "saveflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.saveflag);
    s << indent << "MotionList[]" << std::endl;
    for (size_t i = 0; i < v.MotionList.size(); ++i)
    {
      s << indent << "  MotionList[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.MotionList[i]);
    }
    s << indent << "MotorData[]" << std::endl;
    for (size_t i = 0; i < v.MotorData.size(); ++i)
    {
      s << indent << "  MotorData[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.MotorData[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SAVEMOTION_H
