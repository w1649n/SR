// Generated by gencpp from file tku_msgs/ColorData.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_COLORDATA_H
#define TKU_MSGS_MESSAGE_COLORDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct ColorData_
{
  typedef ColorData_<ContainerAllocator> Type;

  ColorData_()
    : X(0)
    , Y(0)
    , XMin(0)
    , XMax(0)
    , YMin(0)
    , YMax(0)
    , Width(0)
    , Height(0)
    , size(0)  {
    }
  ColorData_(const ContainerAllocator& _alloc)
    : X(0)
    , Y(0)
    , XMin(0)
    , XMax(0)
    , YMin(0)
    , YMax(0)
    , Width(0)
    , Height(0)
    , size(0)  {
  (void)_alloc;
    }



   typedef int32_t _X_type;
  _X_type X;

   typedef int32_t _Y_type;
  _Y_type Y;

   typedef int32_t _XMin_type;
  _XMin_type XMin;

   typedef int32_t _XMax_type;
  _XMax_type XMax;

   typedef int32_t _YMin_type;
  _YMin_type YMin;

   typedef int32_t _YMax_type;
  _YMax_type YMax;

   typedef int32_t _Width_type;
  _Width_type Width;

   typedef int32_t _Height_type;
  _Height_type Height;

   typedef int32_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::tku_msgs::ColorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::ColorData_<ContainerAllocator> const> ConstPtr;

}; // struct ColorData_

typedef ::tku_msgs::ColorData_<std::allocator<void> > ColorData;

typedef boost::shared_ptr< ::tku_msgs::ColorData > ColorDataPtr;
typedef boost::shared_ptr< ::tku_msgs::ColorData const> ColorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::ColorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::ColorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::ColorData_<ContainerAllocator1> & lhs, const ::tku_msgs::ColorData_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.XMin == rhs.XMin &&
    lhs.XMax == rhs.XMax &&
    lhs.YMin == rhs.YMin &&
    lhs.YMax == rhs.YMax &&
    lhs.Width == rhs.Width &&
    lhs.Height == rhs.Height &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::ColorData_<ContainerAllocator1> & lhs, const ::tku_msgs::ColorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ColorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ColorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ColorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ColorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ColorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ColorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::ColorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b2d8bae9bd6b77219cd9e9c64987ae9";
  }

  static const char* value(const ::tku_msgs::ColorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b2d8bae9bd6b772ULL;
  static const uint64_t static_value2 = 0x19cd9e9c64987ae9ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::ColorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/ColorData";
  }

  static const char* value(const ::tku_msgs::ColorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::ColorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 X\n"
"int32 Y\n"
"int32 XMin\n"
"int32 XMax\n"
"int32 YMin\n"
"int32 YMax\n"
"int32 Width\n"
"int32 Height\n"
"int32 size                                                 \n"
;
  }

  static const char* value(const ::tku_msgs::ColorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::ColorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.XMin);
      stream.next(m.XMax);
      stream.next(m.YMin);
      stream.next(m.YMax);
      stream.next(m.Width);
      stream.next(m.Height);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::ColorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::ColorData_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<int32_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Y);
    s << indent << "XMin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.XMin);
    s << indent << "XMax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.XMax);
    s << indent << "YMin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.YMin);
    s << indent << "YMax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.YMax);
    s << indent << "Width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Width);
    s << indent << "Height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Height);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_COLORDATA_H
