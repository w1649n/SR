// Generated by gencpp from file tku_msgs/SaveMotionVector.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SAVEMOTIONVECTOR_H
#define TKU_MSGS_MESSAGE_SAVEMOTIONVECTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/SaveMotion.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct SaveMotionVector_
{
  typedef SaveMotionVector_<ContainerAllocator> Type;

  SaveMotionVector_()
    : SaveMotionVector()  {
    }
  SaveMotionVector_(const ContainerAllocator& _alloc)
    : SaveMotionVector(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tku_msgs::SaveMotion_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tku_msgs::SaveMotion_<ContainerAllocator> >> _SaveMotionVector_type;
  _SaveMotionVector_type SaveMotionVector;





  typedef boost::shared_ptr< ::tku_msgs::SaveMotionVector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SaveMotionVector_<ContainerAllocator> const> ConstPtr;

}; // struct SaveMotionVector_

typedef ::tku_msgs::SaveMotionVector_<std::allocator<void> > SaveMotionVector;

typedef boost::shared_ptr< ::tku_msgs::SaveMotionVector > SaveMotionVectorPtr;
typedef boost::shared_ptr< ::tku_msgs::SaveMotionVector const> SaveMotionVectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SaveMotionVector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SaveMotionVector_<ContainerAllocator1> & lhs, const ::tku_msgs::SaveMotionVector_<ContainerAllocator2> & rhs)
{
  return lhs.SaveMotionVector == rhs.SaveMotionVector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SaveMotionVector_<ContainerAllocator1> & lhs, const ::tku_msgs::SaveMotionVector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SaveMotionVector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SaveMotionVector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SaveMotionVector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67e1cd0228979aba8328714863431170";
  }

  static const char* value(const ::tku_msgs::SaveMotionVector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67e1cd0228979abaULL;
  static const uint64_t static_value2 = 0x8328714863431170ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SaveMotionVector";
  }

  static const char* value(const ::tku_msgs::SaveMotionVector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SaveMotion[] SaveMotionVector\n"
"================================================================================\n"
"MSG: tku_msgs/SaveMotion\n"
"std_msgs/MultiArrayLayout layout\n"
"string name\n"
"int16 motionstate\n"
"int16 ID\n"
"int16 savestate\n"
"bool saveflag\n"
"int16[] MotionList\n"
"int16[] MotorData\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::tku_msgs::SaveMotionVector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.SaveMotionVector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveMotionVector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SaveMotionVector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SaveMotionVector_<ContainerAllocator>& v)
  {
    s << indent << "SaveMotionVector[]" << std::endl;
    for (size_t i = 0; i < v.SaveMotionVector.size(); ++i)
    {
      s << indent << "  SaveMotionVector[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::SaveMotion_<ContainerAllocator> >::stream(s, indent + "    ", v.SaveMotionVector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SAVEMOTIONVECTOR_H
