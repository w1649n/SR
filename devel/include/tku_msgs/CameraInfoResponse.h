// Generated by gencpp from file tku_msgs/CameraInfoResponse.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_CAMERAINFORESPONSE_H
#define TKU_MSGS_MESSAGE_CAMERAINFORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct CameraInfoResponse_
{
  typedef CameraInfoResponse_<ContainerAllocator> Type;

  CameraInfoResponse_()
    : brightness(0)
    , contrast(0)
    , saturation(0)
    , white_balance(0)
    , auto_white_balance(false)
    , auto_exposure(false)
    , auto_Backlight_Compensation(false)  {
    }
  CameraInfoResponse_(const ContainerAllocator& _alloc)
    : brightness(0)
    , contrast(0)
    , saturation(0)
    , white_balance(0)
    , auto_white_balance(false)
    , auto_exposure(false)
    , auto_Backlight_Compensation(false)  {
  (void)_alloc;
    }



   typedef int32_t _brightness_type;
  _brightness_type brightness;

   typedef int32_t _contrast_type;
  _contrast_type contrast;

   typedef int32_t _saturation_type;
  _saturation_type saturation;

   typedef int32_t _white_balance_type;
  _white_balance_type white_balance;

   typedef uint8_t _auto_white_balance_type;
  _auto_white_balance_type auto_white_balance;

   typedef uint8_t _auto_exposure_type;
  _auto_exposure_type auto_exposure;

   typedef uint8_t _auto_Backlight_Compensation_type;
  _auto_Backlight_Compensation_type auto_Backlight_Compensation;





  typedef boost::shared_ptr< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CameraInfoResponse_

typedef ::tku_msgs::CameraInfoResponse_<std::allocator<void> > CameraInfoResponse;

typedef boost::shared_ptr< ::tku_msgs::CameraInfoResponse > CameraInfoResponsePtr;
typedef boost::shared_ptr< ::tku_msgs::CameraInfoResponse const> CameraInfoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::CameraInfoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::CameraInfoResponse_<ContainerAllocator1> & lhs, const ::tku_msgs::CameraInfoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.brightness == rhs.brightness &&
    lhs.contrast == rhs.contrast &&
    lhs.saturation == rhs.saturation &&
    lhs.white_balance == rhs.white_balance &&
    lhs.auto_white_balance == rhs.auto_white_balance &&
    lhs.auto_exposure == rhs.auto_exposure &&
    lhs.auto_Backlight_Compensation == rhs.auto_Backlight_Compensation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::CameraInfoResponse_<ContainerAllocator1> & lhs, const ::tku_msgs::CameraInfoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "470ab9ddf45fde352de26f5b10fb9a47";
  }

  static const char* value(const ::tku_msgs::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x470ab9ddf45fde35ULL;
  static const uint64_t static_value2 = 0x2de26f5b10fb9a47ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/CameraInfoResponse";
  }

  static const char* value(const ::tku_msgs::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 brightness\n"
"int32 contrast\n"
"int32 saturation\n"
"int32 white_balance\n"
"bool auto_white_balance\n"
"bool auto_exposure\n"
"bool auto_Backlight_Compensation\n"
;
  }

  static const char* value(const ::tku_msgs::CameraInfoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brightness);
      stream.next(m.contrast);
      stream.next(m.saturation);
      stream.next(m.white_balance);
      stream.next(m.auto_white_balance);
      stream.next(m.auto_exposure);
      stream.next(m.auto_Backlight_Compensation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraInfoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::CameraInfoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::CameraInfoResponse_<ContainerAllocator>& v)
  {
    s << indent << "brightness: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brightness);
    s << indent << "contrast: ";
    Printer<int32_t>::stream(s, indent + "  ", v.contrast);
    s << indent << "saturation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.saturation);
    s << indent << "white_balance: ";
    Printer<int32_t>::stream(s, indent + "  ", v.white_balance);
    s << indent << "auto_white_balance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_white_balance);
    s << indent << "auto_exposure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_exposure);
    s << indent << "auto_Backlight_Compensation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.auto_Backlight_Compensation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_CAMERAINFORESPONSE_H
