// Generated by gencpp from file tku_msgs/SensorSet.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SENSORSET_H
#define TKU_MSGS_MESSAGE_SENSORSET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct SensorSet_
{
  typedef SensorSet_<ContainerAllocator> Type;

  SensorSet_()
    : sensor_P(0)
    , sensor_I(0)
    , sensor_D(0)
    , Roll(0)
    , Pitch(0)
    , Yaw(0)
    , sup_f(0)
    , nsup_f(0)
    , sensor_modeset(0)  {
    }
  SensorSet_(const ContainerAllocator& _alloc)
    : sensor_P(0)
    , sensor_I(0)
    , sensor_D(0)
    , Roll(0)
    , Pitch(0)
    , Yaw(0)
    , sup_f(0)
    , nsup_f(0)
    , sensor_modeset(0)  {
  (void)_alloc;
    }



   typedef int32_t _sensor_P_type;
  _sensor_P_type sensor_P;

   typedef int32_t _sensor_I_type;
  _sensor_I_type sensor_I;

   typedef int32_t _sensor_D_type;
  _sensor_D_type sensor_D;

   typedef int32_t _Roll_type;
  _Roll_type Roll;

   typedef int32_t _Pitch_type;
  _Pitch_type Pitch;

   typedef int32_t _Yaw_type;
  _Yaw_type Yaw;

   typedef int32_t _sup_f_type;
  _sup_f_type sup_f;

   typedef int32_t _nsup_f_type;
  _nsup_f_type nsup_f;

   typedef int32_t _sensor_modeset_type;
  _sensor_modeset_type sensor_modeset;





  typedef boost::shared_ptr< ::tku_msgs::SensorSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SensorSet_<ContainerAllocator> const> ConstPtr;

}; // struct SensorSet_

typedef ::tku_msgs::SensorSet_<std::allocator<void> > SensorSet;

typedef boost::shared_ptr< ::tku_msgs::SensorSet > SensorSetPtr;
typedef boost::shared_ptr< ::tku_msgs::SensorSet const> SensorSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SensorSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SensorSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SensorSet_<ContainerAllocator1> & lhs, const ::tku_msgs::SensorSet_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_P == rhs.sensor_P &&
    lhs.sensor_I == rhs.sensor_I &&
    lhs.sensor_D == rhs.sensor_D &&
    lhs.Roll == rhs.Roll &&
    lhs.Pitch == rhs.Pitch &&
    lhs.Yaw == rhs.Yaw &&
    lhs.sup_f == rhs.sup_f &&
    lhs.nsup_f == rhs.nsup_f &&
    lhs.sensor_modeset == rhs.sensor_modeset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SensorSet_<ContainerAllocator1> & lhs, const ::tku_msgs::SensorSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SensorSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SensorSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e253bed9c952bfb3fc79dccea7ec39c6";
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe253bed9c952bfb3ULL;
  static const uint64_t static_value2 = 0xfc79dccea7ec39c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SensorSet";
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 sensor_P\n"
"int32 sensor_I\n"
"int32 sensor_D\n"
"int32 Roll\n"
"int32 Pitch\n"
"int32 Yaw\n"
"int32 sup_f\n"
"int32 nsup_f\n"
"int32 sensor_modeset\n"
;
  }

  static const char* value(const ::tku_msgs::SensorSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SensorSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_P);
      stream.next(m.sensor_I);
      stream.next(m.sensor_D);
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
      stream.next(m.sup_f);
      stream.next(m.nsup_f);
      stream.next(m.sensor_modeset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SensorSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SensorSet_<ContainerAllocator>& v)
  {
    s << indent << "sensor_P: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_P);
    s << indent << "sensor_I: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_I);
    s << indent << "sensor_D: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_D);
    s << indent << "Roll: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Roll);
    s << indent << "Pitch: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Pitch);
    s << indent << "Yaw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Yaw);
    s << indent << "sup_f: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sup_f);
    s << indent << "nsup_f: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nsup_f);
    s << indent << "sensor_modeset: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_modeset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SENSORSET_H
