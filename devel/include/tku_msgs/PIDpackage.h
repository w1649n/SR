// Generated by gencpp from file tku_msgs/PIDpackage.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_PIDPACKAGE_H
#define TKU_MSGS_MESSAGE_PIDPACKAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct PIDpackage_
{
  typedef PIDpackage_<ContainerAllocator> Type;

  PIDpackage_()
    : motor_P(0)
    , motor_I(0)
    , motor_D(0)
    , Pflag(false)
    , Iflag(false)
    , Dflag(false)
    , motorID(0)  {
    }
  PIDpackage_(const ContainerAllocator& _alloc)
    : motor_P(0)
    , motor_I(0)
    , motor_D(0)
    , Pflag(false)
    , Iflag(false)
    , Dflag(false)
    , motorID(0)  {
  (void)_alloc;
    }



   typedef int16_t _motor_P_type;
  _motor_P_type motor_P;

   typedef int16_t _motor_I_type;
  _motor_I_type motor_I;

   typedef int16_t _motor_D_type;
  _motor_D_type motor_D;

   typedef uint8_t _Pflag_type;
  _Pflag_type Pflag;

   typedef uint8_t _Iflag_type;
  _Iflag_type Iflag;

   typedef uint8_t _Dflag_type;
  _Dflag_type Dflag;

   typedef int16_t _motorID_type;
  _motorID_type motorID;





  typedef boost::shared_ptr< ::tku_msgs::PIDpackage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::PIDpackage_<ContainerAllocator> const> ConstPtr;

}; // struct PIDpackage_

typedef ::tku_msgs::PIDpackage_<std::allocator<void> > PIDpackage;

typedef boost::shared_ptr< ::tku_msgs::PIDpackage > PIDpackagePtr;
typedef boost::shared_ptr< ::tku_msgs::PIDpackage const> PIDpackageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::PIDpackage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::PIDpackage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::PIDpackage_<ContainerAllocator1> & lhs, const ::tku_msgs::PIDpackage_<ContainerAllocator2> & rhs)
{
  return lhs.motor_P == rhs.motor_P &&
    lhs.motor_I == rhs.motor_I &&
    lhs.motor_D == rhs.motor_D &&
    lhs.Pflag == rhs.Pflag &&
    lhs.Iflag == rhs.Iflag &&
    lhs.Dflag == rhs.Dflag &&
    lhs.motorID == rhs.motorID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::PIDpackage_<ContainerAllocator1> & lhs, const ::tku_msgs::PIDpackage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::PIDpackage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::PIDpackage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::PIDpackage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::PIDpackage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::PIDpackage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::PIDpackage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::PIDpackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5af5d5808f08141dacc4cc0d9857989";
  }

  static const char* value(const ::tku_msgs::PIDpackage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5af5d5808f08141ULL;
  static const uint64_t static_value2 = 0xdacc4cc0d9857989ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::PIDpackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/PIDpackage";
  }

  static const char* value(const ::tku_msgs::PIDpackage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::PIDpackage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 motor_P\n"
"int16 motor_I\n"
"int16 motor_D\n"
"bool  Pflag\n"
"bool  Iflag\n"
"bool  Dflag\n"
"int16 motorID\n"
;
  }

  static const char* value(const ::tku_msgs::PIDpackage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::PIDpackage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_P);
      stream.next(m.motor_I);
      stream.next(m.motor_D);
      stream.next(m.Pflag);
      stream.next(m.Iflag);
      stream.next(m.Dflag);
      stream.next(m.motorID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDpackage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::PIDpackage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::PIDpackage_<ContainerAllocator>& v)
  {
    s << indent << "motor_P: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_P);
    s << indent << "motor_I: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_I);
    s << indent << "motor_D: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motor_D);
    s << indent << "Pflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Pflag);
    s << indent << "Iflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Iflag);
    s << indent << "Dflag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Dflag);
    s << indent << "motorID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.motorID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_PIDPACKAGE_H
