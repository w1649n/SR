// Generated by gencpp from file tku_msgs/parameter.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_PARAMETER_H
#define TKU_MSGS_MESSAGE_PARAMETER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/B_SplineParam.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct parameter_
{
  typedef parameter_<ContainerAllocator> Type;

  parameter_()
    : mode(0)
    , X_Swing_Range(0.0)
    , Y_Swing_Range(0.0)
    , Z_Swing_Range(0.0)
    , Period_T(0)
    , Period_T2(0)
    , Sample_Time(0)
    , OSC_LockRange(0.0)
    , BASE_Default_Z(0.0)
    , Y_Swing_Shift(0.0)
    , X_Swing_COM(0.0)
    , BASE_LIFT_Z(0.0)
    , Stand_Balance(false)
    , B_SplineParam()  {
    }
  parameter_(const ContainerAllocator& _alloc)
    : mode(0)
    , X_Swing_Range(0.0)
    , Y_Swing_Range(0.0)
    , Z_Swing_Range(0.0)
    , Period_T(0)
    , Period_T2(0)
    , Sample_Time(0)
    , OSC_LockRange(0.0)
    , BASE_Default_Z(0.0)
    , Y_Swing_Shift(0.0)
    , X_Swing_COM(0.0)
    , BASE_LIFT_Z(0.0)
    , Stand_Balance(false)
    , B_SplineParam(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef float _X_Swing_Range_type;
  _X_Swing_Range_type X_Swing_Range;

   typedef float _Y_Swing_Range_type;
  _Y_Swing_Range_type Y_Swing_Range;

   typedef float _Z_Swing_Range_type;
  _Z_Swing_Range_type Z_Swing_Range;

   typedef int32_t _Period_T_type;
  _Period_T_type Period_T;

   typedef int32_t _Period_T2_type;
  _Period_T2_type Period_T2;

   typedef int32_t _Sample_Time_type;
  _Sample_Time_type Sample_Time;

   typedef float _OSC_LockRange_type;
  _OSC_LockRange_type OSC_LockRange;

   typedef float _BASE_Default_Z_type;
  _BASE_Default_Z_type BASE_Default_Z;

   typedef float _Y_Swing_Shift_type;
  _Y_Swing_Shift_type Y_Swing_Shift;

   typedef float _X_Swing_COM_type;
  _X_Swing_COM_type X_Swing_COM;

   typedef float _BASE_LIFT_Z_type;
  _BASE_LIFT_Z_type BASE_LIFT_Z;

   typedef uint8_t _Stand_Balance_type;
  _Stand_Balance_type Stand_Balance;

   typedef  ::tku_msgs::B_SplineParam_<ContainerAllocator>  _B_SplineParam_type;
  _B_SplineParam_type B_SplineParam;





  typedef boost::shared_ptr< ::tku_msgs::parameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::parameter_<ContainerAllocator> const> ConstPtr;

}; // struct parameter_

typedef ::tku_msgs::parameter_<std::allocator<void> > parameter;

typedef boost::shared_ptr< ::tku_msgs::parameter > parameterPtr;
typedef boost::shared_ptr< ::tku_msgs::parameter const> parameterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::parameter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::parameter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::parameter_<ContainerAllocator1> & lhs, const ::tku_msgs::parameter_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.X_Swing_Range == rhs.X_Swing_Range &&
    lhs.Y_Swing_Range == rhs.Y_Swing_Range &&
    lhs.Z_Swing_Range == rhs.Z_Swing_Range &&
    lhs.Period_T == rhs.Period_T &&
    lhs.Period_T2 == rhs.Period_T2 &&
    lhs.Sample_Time == rhs.Sample_Time &&
    lhs.OSC_LockRange == rhs.OSC_LockRange &&
    lhs.BASE_Default_Z == rhs.BASE_Default_Z &&
    lhs.Y_Swing_Shift == rhs.Y_Swing_Shift &&
    lhs.X_Swing_COM == rhs.X_Swing_COM &&
    lhs.BASE_LIFT_Z == rhs.BASE_LIFT_Z &&
    lhs.Stand_Balance == rhs.Stand_Balance &&
    lhs.B_SplineParam == rhs.B_SplineParam;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::parameter_<ContainerAllocator1> & lhs, const ::tku_msgs::parameter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::parameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::parameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::parameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::parameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::parameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::parameter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26e341a60488695b5d4b9cb793388d9c";
  }

  static const char* value(const ::tku_msgs::parameter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26e341a60488695bULL;
  static const uint64_t static_value2 = 0x5d4b9cb793388d9cULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/parameter";
  }

  static const char* value(const ::tku_msgs::parameter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"float32 X_Swing_Range\n"
"float32 Y_Swing_Range\n"
"float32 Z_Swing_Range\n"
"int32 Period_T\n"
"int32 Period_T2\n"
"int32 Sample_Time\n"
"float32 OSC_LockRange\n"
"float32 BASE_Default_Z\n"
"float32 Y_Swing_Shift\n"
"float32 X_Swing_COM\n"
"float32 BASE_LIFT_Z\n"
"bool Stand_Balance\n"
"B_SplineParam B_SplineParam\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/B_SplineParam\n"
"float32 Kick_Point_X\n"
"float32 Kick_Point_Y\n"
"float32 Kick_Point_Z\n"
"float32 Back_Point_X\n"
"float32 Back_Point_Z\n"
"float32 Support_Foot_Hip_Upper_Pitch\n"
"float32 Kick_Foot_Ankle_Upper_Pitch\n"
"float32 Support_Foot_Ankle_Upper_Pitch\n"
;
  }

  static const char* value(const ::tku_msgs::parameter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::parameter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.X_Swing_Range);
      stream.next(m.Y_Swing_Range);
      stream.next(m.Z_Swing_Range);
      stream.next(m.Period_T);
      stream.next(m.Period_T2);
      stream.next(m.Sample_Time);
      stream.next(m.OSC_LockRange);
      stream.next(m.BASE_Default_Z);
      stream.next(m.Y_Swing_Shift);
      stream.next(m.X_Swing_COM);
      stream.next(m.BASE_LIFT_Z);
      stream.next(m.Stand_Balance);
      stream.next(m.B_SplineParam);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parameter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::parameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::parameter_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "X_Swing_Range: ";
    Printer<float>::stream(s, indent + "  ", v.X_Swing_Range);
    s << indent << "Y_Swing_Range: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Swing_Range);
    s << indent << "Z_Swing_Range: ";
    Printer<float>::stream(s, indent + "  ", v.Z_Swing_Range);
    s << indent << "Period_T: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Period_T);
    s << indent << "Period_T2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Period_T2);
    s << indent << "Sample_Time: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sample_Time);
    s << indent << "OSC_LockRange: ";
    Printer<float>::stream(s, indent + "  ", v.OSC_LockRange);
    s << indent << "BASE_Default_Z: ";
    Printer<float>::stream(s, indent + "  ", v.BASE_Default_Z);
    s << indent << "Y_Swing_Shift: ";
    Printer<float>::stream(s, indent + "  ", v.Y_Swing_Shift);
    s << indent << "X_Swing_COM: ";
    Printer<float>::stream(s, indent + "  ", v.X_Swing_COM);
    s << indent << "BASE_LIFT_Z: ";
    Printer<float>::stream(s, indent + "  ", v.BASE_LIFT_Z);
    s << indent << "Stand_Balance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Stand_Balance);
    s << indent << "B_SplineParam: ";
    s << std::endl;
    Printer< ::tku_msgs::B_SplineParam_<ContainerAllocator> >::stream(s, indent + "  ", v.B_SplineParam);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_PARAMETER_H
