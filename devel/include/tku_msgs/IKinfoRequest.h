// Generated by gencpp from file tku_msgs/IKinfoRequest.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_IKINFOREQUEST_H
#define TKU_MSGS_MESSAGE_IKINFOREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct IKinfoRequest_
{
  typedef IKinfoRequest_<ContainerAllocator> Type;

  IKinfoRequest_()
    : IK_Point_RX(0.0)
    , IK_Point_RY(0.0)
    , IK_Point_RZ(0.0)
    , IK_Point_RThta(0.0)
    , IK_Point_LX(0.0)
    , IK_Point_LY(0.0)
    , IK_Point_LZ(0.0)
    , IK_Point_LThta(0.0)
    , Sampletime(0)  {
    }
  IKinfoRequest_(const ContainerAllocator& _alloc)
    : IK_Point_RX(0.0)
    , IK_Point_RY(0.0)
    , IK_Point_RZ(0.0)
    , IK_Point_RThta(0.0)
    , IK_Point_LX(0.0)
    , IK_Point_LY(0.0)
    , IK_Point_LZ(0.0)
    , IK_Point_LThta(0.0)
    , Sampletime(0)  {
  (void)_alloc;
    }



   typedef double _IK_Point_RX_type;
  _IK_Point_RX_type IK_Point_RX;

   typedef double _IK_Point_RY_type;
  _IK_Point_RY_type IK_Point_RY;

   typedef double _IK_Point_RZ_type;
  _IK_Point_RZ_type IK_Point_RZ;

   typedef double _IK_Point_RThta_type;
  _IK_Point_RThta_type IK_Point_RThta;

   typedef double _IK_Point_LX_type;
  _IK_Point_LX_type IK_Point_LX;

   typedef double _IK_Point_LY_type;
  _IK_Point_LY_type IK_Point_LY;

   typedef double _IK_Point_LZ_type;
  _IK_Point_LZ_type IK_Point_LZ;

   typedef double _IK_Point_LThta_type;
  _IK_Point_LThta_type IK_Point_LThta;

   typedef int32_t _Sampletime_type;
  _Sampletime_type Sampletime;





  typedef boost::shared_ptr< ::tku_msgs::IKinfoRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::IKinfoRequest_<ContainerAllocator> const> ConstPtr;

}; // struct IKinfoRequest_

typedef ::tku_msgs::IKinfoRequest_<std::allocator<void> > IKinfoRequest;

typedef boost::shared_ptr< ::tku_msgs::IKinfoRequest > IKinfoRequestPtr;
typedef boost::shared_ptr< ::tku_msgs::IKinfoRequest const> IKinfoRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::IKinfoRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::IKinfoRequest_<ContainerAllocator1> & lhs, const ::tku_msgs::IKinfoRequest_<ContainerAllocator2> & rhs)
{
  return lhs.IK_Point_RX == rhs.IK_Point_RX &&
    lhs.IK_Point_RY == rhs.IK_Point_RY &&
    lhs.IK_Point_RZ == rhs.IK_Point_RZ &&
    lhs.IK_Point_RThta == rhs.IK_Point_RThta &&
    lhs.IK_Point_LX == rhs.IK_Point_LX &&
    lhs.IK_Point_LY == rhs.IK_Point_LY &&
    lhs.IK_Point_LZ == rhs.IK_Point_LZ &&
    lhs.IK_Point_LThta == rhs.IK_Point_LThta &&
    lhs.Sampletime == rhs.Sampletime;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::IKinfoRequest_<ContainerAllocator1> & lhs, const ::tku_msgs::IKinfoRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::IKinfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::IKinfoRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::IKinfoRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83d72fcea3aea0bae04a407abcecc69b";
  }

  static const char* value(const ::tku_msgs::IKinfoRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83d72fcea3aea0baULL;
  static const uint64_t static_value2 = 0xe04a407abcecc69bULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/IKinfoRequest";
  }

  static const char* value(const ::tku_msgs::IKinfoRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 IK_Point_RX\n"
"float64 IK_Point_RY\n"
"float64 IK_Point_RZ\n"
"float64 IK_Point_RThta\n"
"float64 IK_Point_LX\n"
"float64 IK_Point_LY\n"
"float64 IK_Point_LZ \n"
"float64 IK_Point_LThta\n"
"int32 Sampletime\n"
;
  }

  static const char* value(const ::tku_msgs::IKinfoRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.IK_Point_RX);
      stream.next(m.IK_Point_RY);
      stream.next(m.IK_Point_RZ);
      stream.next(m.IK_Point_RThta);
      stream.next(m.IK_Point_LX);
      stream.next(m.IK_Point_LY);
      stream.next(m.IK_Point_LZ);
      stream.next(m.IK_Point_LThta);
      stream.next(m.Sampletime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IKinfoRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::IKinfoRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::IKinfoRequest_<ContainerAllocator>& v)
  {
    s << indent << "IK_Point_RX: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_RX);
    s << indent << "IK_Point_RY: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_RY);
    s << indent << "IK_Point_RZ: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_RZ);
    s << indent << "IK_Point_RThta: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_RThta);
    s << indent << "IK_Point_LX: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_LX);
    s << indent << "IK_Point_LY: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_LY);
    s << indent << "IK_Point_LZ: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_LZ);
    s << indent << "IK_Point_LThta: ";
    Printer<double>::stream(s, indent + "  ", v.IK_Point_LThta);
    s << indent << "Sampletime: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sampletime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_IKINFOREQUEST_H
