// Generated by gencpp from file tku_msgs/SingleMotorData.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SINGLEMOTORDATA_H
#define TKU_MSGS_MESSAGE_SINGLEMOTORDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct SingleMotorData_
{
  typedef SingleMotorData_<ContainerAllocator> Type;

  SingleMotorData_()
    : ID(0)
    , Position(0)
    , Speed(0)  {
    }
  SingleMotorData_(const ContainerAllocator& _alloc)
    : ID(0)
    , Position(0)
    , Speed(0)  {
  (void)_alloc;
    }



   typedef int16_t _ID_type;
  _ID_type ID;

   typedef int16_t _Position_type;
  _Position_type Position;

   typedef int16_t _Speed_type;
  _Speed_type Speed;





  typedef boost::shared_ptr< ::tku_msgs::SingleMotorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SingleMotorData_<ContainerAllocator> const> ConstPtr;

}; // struct SingleMotorData_

typedef ::tku_msgs::SingleMotorData_<std::allocator<void> > SingleMotorData;

typedef boost::shared_ptr< ::tku_msgs::SingleMotorData > SingleMotorDataPtr;
typedef boost::shared_ptr< ::tku_msgs::SingleMotorData const> SingleMotorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SingleMotorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SingleMotorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SingleMotorData_<ContainerAllocator1> & lhs, const ::tku_msgs::SingleMotorData_<ContainerAllocator2> & rhs)
{
  return lhs.ID == rhs.ID &&
    lhs.Position == rhs.Position &&
    lhs.Speed == rhs.Speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SingleMotorData_<ContainerAllocator1> & lhs, const ::tku_msgs::SingleMotorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SingleMotorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SingleMotorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SingleMotorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "500f0005c75401d9e71a90a58a6bbf60";
  }

  static const char* value(const ::tku_msgs::SingleMotorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x500f0005c75401d9ULL;
  static const uint64_t static_value2 = 0xe71a90a58a6bbf60ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SingleMotorData";
  }

  static const char* value(const ::tku_msgs::SingleMotorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 ID\n"
"int16 Position\n"
"int16 Speed\n"
;
  }

  static const char* value(const ::tku_msgs::SingleMotorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.Position);
      stream.next(m.Speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SingleMotorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SingleMotorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SingleMotorData_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "Position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Position);
    s << indent << "Speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SINGLEMOTORDATA_H
