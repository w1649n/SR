// Generated by gencpp from file tku_msgs/HSVValue.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_HSVVALUE_H
#define TKU_MSGS_MESSAGE_HSVVALUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct HSVValue_
{
  typedef HSVValue_<ContainerAllocator> Type;

  HSVValue_()
    : HMin(0)
    , HMax(0)
    , SMin(0)
    , SMax(0)
    , VMin(0)
    , VMax(0)  {
    }
  HSVValue_(const ContainerAllocator& _alloc)
    : HMin(0)
    , HMax(0)
    , SMin(0)
    , SMax(0)
    , VMin(0)
    , VMax(0)  {
  (void)_alloc;
    }



   typedef int16_t _HMin_type;
  _HMin_type HMin;

   typedef int16_t _HMax_type;
  _HMax_type HMax;

   typedef int16_t _SMin_type;
  _SMin_type SMin;

   typedef int16_t _SMax_type;
  _SMax_type SMax;

   typedef int16_t _VMin_type;
  _VMin_type VMin;

   typedef int16_t _VMax_type;
  _VMax_type VMax;





  typedef boost::shared_ptr< ::tku_msgs::HSVValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::HSVValue_<ContainerAllocator> const> ConstPtr;

}; // struct HSVValue_

typedef ::tku_msgs::HSVValue_<std::allocator<void> > HSVValue;

typedef boost::shared_ptr< ::tku_msgs::HSVValue > HSVValuePtr;
typedef boost::shared_ptr< ::tku_msgs::HSVValue const> HSVValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::HSVValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::HSVValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::HSVValue_<ContainerAllocator1> & lhs, const ::tku_msgs::HSVValue_<ContainerAllocator2> & rhs)
{
  return lhs.HMin == rhs.HMin &&
    lhs.HMax == rhs.HMax &&
    lhs.SMin == rhs.SMin &&
    lhs.SMax == rhs.SMax &&
    lhs.VMin == rhs.VMin &&
    lhs.VMax == rhs.VMax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::HSVValue_<ContainerAllocator1> & lhs, const ::tku_msgs::HSVValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::HSVValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::HSVValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::HSVValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::HSVValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::HSVValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::HSVValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3f516b6603d2233bee0097ee5df3644";
  }

  static const char* value(const ::tku_msgs::HSVValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3f516b6603d2233ULL;
  static const uint64_t static_value2 = 0xbee0097ee5df3644ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/HSVValue";
  }

  static const char* value(const ::tku_msgs::HSVValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::HSVValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 HMin\n"
"int16 HMax\n"
"int16 SMin\n"
"int16 SMax\n"
"int16 VMin\n"
"int16 VMax\n"
"\n"
;
  }

  static const char* value(const ::tku_msgs::HSVValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::HSVValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.HMin);
      stream.next(m.HMax);
      stream.next(m.SMin);
      stream.next(m.SMax);
      stream.next(m.VMin);
      stream.next(m.VMax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HSVValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::HSVValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::HSVValue_<ContainerAllocator>& v)
  {
    s << indent << "HMin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.HMin);
    s << indent << "HMax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.HMax);
    s << indent << "SMin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.SMin);
    s << indent << "SMax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.SMax);
    s << indent << "VMin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VMin);
    s << indent << "VMax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.VMax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_HSVVALUE_H
