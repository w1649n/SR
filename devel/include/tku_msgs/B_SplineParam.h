// Generated by gencpp from file tku_msgs/B_SplineParam.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_B_SPLINEPARAM_H
#define TKU_MSGS_MESSAGE_B_SPLINEPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tku_msgs
{
template <class ContainerAllocator>
struct B_SplineParam_
{
  typedef B_SplineParam_<ContainerAllocator> Type;

  B_SplineParam_()
    : Kick_Point_X(0.0)
    , Kick_Point_Y(0.0)
    , Kick_Point_Z(0.0)
    , Back_Point_X(0.0)
    , Back_Point_Z(0.0)
    , Support_Foot_Hip_Upper_Pitch(0.0)
    , Kick_Foot_Ankle_Upper_Pitch(0.0)
    , Support_Foot_Ankle_Upper_Pitch(0.0)  {
    }
  B_SplineParam_(const ContainerAllocator& _alloc)
    : Kick_Point_X(0.0)
    , Kick_Point_Y(0.0)
    , Kick_Point_Z(0.0)
    , Back_Point_X(0.0)
    , Back_Point_Z(0.0)
    , Support_Foot_Hip_Upper_Pitch(0.0)
    , Kick_Foot_Ankle_Upper_Pitch(0.0)
    , Support_Foot_Ankle_Upper_Pitch(0.0)  {
  (void)_alloc;
    }



   typedef float _Kick_Point_X_type;
  _Kick_Point_X_type Kick_Point_X;

   typedef float _Kick_Point_Y_type;
  _Kick_Point_Y_type Kick_Point_Y;

   typedef float _Kick_Point_Z_type;
  _Kick_Point_Z_type Kick_Point_Z;

   typedef float _Back_Point_X_type;
  _Back_Point_X_type Back_Point_X;

   typedef float _Back_Point_Z_type;
  _Back_Point_Z_type Back_Point_Z;

   typedef float _Support_Foot_Hip_Upper_Pitch_type;
  _Support_Foot_Hip_Upper_Pitch_type Support_Foot_Hip_Upper_Pitch;

   typedef float _Kick_Foot_Ankle_Upper_Pitch_type;
  _Kick_Foot_Ankle_Upper_Pitch_type Kick_Foot_Ankle_Upper_Pitch;

   typedef float _Support_Foot_Ankle_Upper_Pitch_type;
  _Support_Foot_Ankle_Upper_Pitch_type Support_Foot_Ankle_Upper_Pitch;





  typedef boost::shared_ptr< ::tku_msgs::B_SplineParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::B_SplineParam_<ContainerAllocator> const> ConstPtr;

}; // struct B_SplineParam_

typedef ::tku_msgs::B_SplineParam_<std::allocator<void> > B_SplineParam;

typedef boost::shared_ptr< ::tku_msgs::B_SplineParam > B_SplineParamPtr;
typedef boost::shared_ptr< ::tku_msgs::B_SplineParam const> B_SplineParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::B_SplineParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::B_SplineParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::B_SplineParam_<ContainerAllocator1> & lhs, const ::tku_msgs::B_SplineParam_<ContainerAllocator2> & rhs)
{
  return lhs.Kick_Point_X == rhs.Kick_Point_X &&
    lhs.Kick_Point_Y == rhs.Kick_Point_Y &&
    lhs.Kick_Point_Z == rhs.Kick_Point_Z &&
    lhs.Back_Point_X == rhs.Back_Point_X &&
    lhs.Back_Point_Z == rhs.Back_Point_Z &&
    lhs.Support_Foot_Hip_Upper_Pitch == rhs.Support_Foot_Hip_Upper_Pitch &&
    lhs.Kick_Foot_Ankle_Upper_Pitch == rhs.Kick_Foot_Ankle_Upper_Pitch &&
    lhs.Support_Foot_Ankle_Upper_Pitch == rhs.Support_Foot_Ankle_Upper_Pitch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::B_SplineParam_<ContainerAllocator1> & lhs, const ::tku_msgs::B_SplineParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::B_SplineParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::B_SplineParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::B_SplineParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de6e7c118c1a5ca63d7d6831ee0bf34c";
  }

  static const char* value(const ::tku_msgs::B_SplineParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde6e7c118c1a5ca6ULL;
  static const uint64_t static_value2 = 0x3d7d6831ee0bf34cULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/B_SplineParam";
  }

  static const char* value(const ::tku_msgs::B_SplineParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Kick_Point_X\n"
"float32 Kick_Point_Y\n"
"float32 Kick_Point_Z\n"
"float32 Back_Point_X\n"
"float32 Back_Point_Z\n"
"float32 Support_Foot_Hip_Upper_Pitch\n"
"float32 Kick_Foot_Ankle_Upper_Pitch\n"
"float32 Support_Foot_Ankle_Upper_Pitch\n"
;
  }

  static const char* value(const ::tku_msgs::B_SplineParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Kick_Point_X);
      stream.next(m.Kick_Point_Y);
      stream.next(m.Kick_Point_Z);
      stream.next(m.Back_Point_X);
      stream.next(m.Back_Point_Z);
      stream.next(m.Support_Foot_Hip_Upper_Pitch);
      stream.next(m.Kick_Foot_Ankle_Upper_Pitch);
      stream.next(m.Support_Foot_Ankle_Upper_Pitch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct B_SplineParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::B_SplineParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::B_SplineParam_<ContainerAllocator>& v)
  {
    s << indent << "Kick_Point_X: ";
    Printer<float>::stream(s, indent + "  ", v.Kick_Point_X);
    s << indent << "Kick_Point_Y: ";
    Printer<float>::stream(s, indent + "  ", v.Kick_Point_Y);
    s << indent << "Kick_Point_Z: ";
    Printer<float>::stream(s, indent + "  ", v.Kick_Point_Z);
    s << indent << "Back_Point_X: ";
    Printer<float>::stream(s, indent + "  ", v.Back_Point_X);
    s << indent << "Back_Point_Z: ";
    Printer<float>::stream(s, indent + "  ", v.Back_Point_Z);
    s << indent << "Support_Foot_Hip_Upper_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Support_Foot_Hip_Upper_Pitch);
    s << indent << "Kick_Foot_Ankle_Upper_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Kick_Foot_Ankle_Upper_Pitch);
    s << indent << "Support_Foot_Ankle_Upper_Pitch: ";
    Printer<float>::stream(s, indent + "  ", v.Support_Foot_Ankle_Upper_Pitch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_B_SPLINEPARAM_H
