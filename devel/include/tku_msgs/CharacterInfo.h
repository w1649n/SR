// Generated by gencpp from file tku_msgs/CharacterInfo.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_CHARACTERINFO_H
#define TKU_MSGS_MESSAGE_CHARACTERINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/WitchData.h>
#include <tku_msgs/WitchData.h>
#include <tku_msgs/ObjectInfo.h>
#include <tku_msgs/ObjectInfo.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct CharacterInfo_
{
  typedef CharacterInfo_<ContainerAllocator> Type;

  CharacterInfo_()
    : which_robot()
    , name()
    , x(0.0)
    , y(0.0)
    , exist_flag(false)
    , theta()
    , dist()
    , object()
    , enemy()  {
    }
  CharacterInfo_(const ContainerAllocator& _alloc)
    : which_robot(_alloc)
    , name(_alloc)
    , x(0.0)
    , y(0.0)
    , exist_flag(false)
    , theta(_alloc)
    , dist(_alloc)
    , object(_alloc)
    , enemy(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _which_robot_type;
  _which_robot_type which_robot;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef uint8_t _exist_flag_type;
  _exist_flag_type exist_flag;

   typedef  ::tku_msgs::WitchData_<ContainerAllocator>  _theta_type;
  _theta_type theta;

   typedef  ::tku_msgs::WitchData_<ContainerAllocator>  _dist_type;
  _dist_type dist;

   typedef std::vector< ::tku_msgs::ObjectInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tku_msgs::ObjectInfo_<ContainerAllocator> >> _object_type;
  _object_type object;

   typedef std::vector< ::tku_msgs::ObjectInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tku_msgs::ObjectInfo_<ContainerAllocator> >> _enemy_type;
  _enemy_type enemy;





  typedef boost::shared_ptr< ::tku_msgs::CharacterInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::CharacterInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CharacterInfo_

typedef ::tku_msgs::CharacterInfo_<std::allocator<void> > CharacterInfo;

typedef boost::shared_ptr< ::tku_msgs::CharacterInfo > CharacterInfoPtr;
typedef boost::shared_ptr< ::tku_msgs::CharacterInfo const> CharacterInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::CharacterInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::CharacterInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::CharacterInfo_<ContainerAllocator1> & lhs, const ::tku_msgs::CharacterInfo_<ContainerAllocator2> & rhs)
{
  return lhs.which_robot == rhs.which_robot &&
    lhs.name == rhs.name &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.exist_flag == rhs.exist_flag &&
    lhs.theta == rhs.theta &&
    lhs.dist == rhs.dist &&
    lhs.object == rhs.object &&
    lhs.enemy == rhs.enemy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::CharacterInfo_<ContainerAllocator1> & lhs, const ::tku_msgs::CharacterInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::CharacterInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::CharacterInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::CharacterInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "291b746588435b1a71d12e22c696f64a";
  }

  static const char* value(const ::tku_msgs::CharacterInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x291b746588435b1aULL;
  static const uint64_t static_value2 = 0x71d12e22c696f64aULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/CharacterInfo";
  }

  static const char* value(const ::tku_msgs::CharacterInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string which_robot\n"
"string name\n"
"float32 x\n"
"float32 y\n"
"bool exist_flag\n"
"WitchData theta\n"
"WitchData dist\n"
"ObjectInfo[] object\n"
"ObjectInfo[] enemy\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/WitchData\n"
"float32 local\n"
"float32 global\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/ObjectInfo\n"
"string name\n"
"float32 x\n"
"float32 y\n"
"bool exist_flag\n"
"WitchData theta\n"
"WitchData dist\n"
;
  }

  static const char* value(const ::tku_msgs::CharacterInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.which_robot);
      stream.next(m.name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.exist_flag);
      stream.next(m.theta);
      stream.next(m.dist);
      stream.next(m.object);
      stream.next(m.enemy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CharacterInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::CharacterInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::CharacterInfo_<ContainerAllocator>& v)
  {
    s << indent << "which_robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.which_robot);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "exist_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exist_flag);
    s << indent << "theta: ";
    s << std::endl;
    Printer< ::tku_msgs::WitchData_<ContainerAllocator> >::stream(s, indent + "  ", v.theta);
    s << indent << "dist: ";
    s << std::endl;
    Printer< ::tku_msgs::WitchData_<ContainerAllocator> >::stream(s, indent + "  ", v.dist);
    s << indent << "object[]" << std::endl;
    for (size_t i = 0; i < v.object.size(); ++i)
    {
      s << indent << "  object[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::ObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.object[i]);
    }
    s << indent << "enemy[]" << std::endl;
    for (size_t i = 0; i < v.enemy.size(); ++i)
    {
      s << indent << "  enemy[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::ObjectInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.enemy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_CHARACTERINFO_H
