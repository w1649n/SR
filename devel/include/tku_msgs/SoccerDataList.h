// Generated by gencpp from file tku_msgs/SoccerDataList.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_SOCCERDATALIST_H
#define TKU_MSGS_MESSAGE_SOCCERDATALIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/SoccerData.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct SoccerDataList_
{
  typedef SoccerDataList_<ContainerAllocator> Type;

  SoccerDataList_()
    : object_cnt(0)
    , ObjectList()  {
    }
  SoccerDataList_(const ContainerAllocator& _alloc)
    : object_cnt(0)
    , ObjectList(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _object_cnt_type;
  _object_cnt_type object_cnt;

   typedef std::vector< ::tku_msgs::SoccerData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tku_msgs::SoccerData_<ContainerAllocator> >> _ObjectList_type;
  _ObjectList_type ObjectList;





  typedef boost::shared_ptr< ::tku_msgs::SoccerDataList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::SoccerDataList_<ContainerAllocator> const> ConstPtr;

}; // struct SoccerDataList_

typedef ::tku_msgs::SoccerDataList_<std::allocator<void> > SoccerDataList;

typedef boost::shared_ptr< ::tku_msgs::SoccerDataList > SoccerDataListPtr;
typedef boost::shared_ptr< ::tku_msgs::SoccerDataList const> SoccerDataListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::SoccerDataList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::SoccerDataList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::SoccerDataList_<ContainerAllocator1> & lhs, const ::tku_msgs::SoccerDataList_<ContainerAllocator2> & rhs)
{
  return lhs.object_cnt == rhs.object_cnt &&
    lhs.ObjectList == rhs.ObjectList;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::SoccerDataList_<ContainerAllocator1> & lhs, const ::tku_msgs::SoccerDataList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::SoccerDataList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::SoccerDataList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::SoccerDataList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4bf9f67971129bb91670b6e5affb7fa2";
  }

  static const char* value(const ::tku_msgs::SoccerDataList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4bf9f67971129bb9ULL;
  static const uint64_t static_value2 = 0x1670b6e5affb7fa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/SoccerDataList";
  }

  static const char* value(const ::tku_msgs::SoccerDataList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 object_cnt\n"
"SoccerData[] ObjectList\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/SoccerData\n"
"int32 x\n"
"int32 y\n"
"int32 height\n"
"int32 width\n"
"Distance distance\n"
"int32 object_mode\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/Distance\n"
"int16 x_dis\n"
"int16 y_dis\n"
"int16 dis\n"
;
  }

  static const char* value(const ::tku_msgs::SoccerDataList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_cnt);
      stream.next(m.ObjectList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoccerDataList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::SoccerDataList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::SoccerDataList_<ContainerAllocator>& v)
  {
    s << indent << "object_cnt: ";
    Printer<int16_t>::stream(s, indent + "  ", v.object_cnt);
    s << indent << "ObjectList[]" << std::endl;
    for (size_t i = 0; i < v.ObjectList.size(); ++i)
    {
      s << indent << "  ObjectList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::SoccerData_<ContainerAllocator> >::stream(s, indent + "    ", v.ObjectList[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_SOCCERDATALIST_H
