// Generated by gencpp from file tku_msgs/ObjectList.msg
// DO NOT EDIT!


#ifndef TKU_MSGS_MESSAGE_OBJECTLIST_H
#define TKU_MSGS_MESSAGE_OBJECTLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tku_msgs/ColorArray.h>

namespace tku_msgs
{
template <class ContainerAllocator>
struct ObjectList_
{
  typedef ObjectList_<ContainerAllocator> Type;

  ObjectList_()
    : Objectlist()  {
    }
  ObjectList_(const ContainerAllocator& _alloc)
    : Objectlist(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tku_msgs::ColorArray_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::tku_msgs::ColorArray_<ContainerAllocator> >> _Objectlist_type;
  _Objectlist_type Objectlist;





  typedef boost::shared_ptr< ::tku_msgs::ObjectList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tku_msgs::ObjectList_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectList_

typedef ::tku_msgs::ObjectList_<std::allocator<void> > ObjectList;

typedef boost::shared_ptr< ::tku_msgs::ObjectList > ObjectListPtr;
typedef boost::shared_ptr< ::tku_msgs::ObjectList const> ObjectListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tku_msgs::ObjectList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tku_msgs::ObjectList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tku_msgs::ObjectList_<ContainerAllocator1> & lhs, const ::tku_msgs::ObjectList_<ContainerAllocator2> & rhs)
{
  return lhs.Objectlist == rhs.Objectlist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tku_msgs::ObjectList_<ContainerAllocator1> & lhs, const ::tku_msgs::ObjectList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tku_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tku_msgs::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ObjectList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tku_msgs::ObjectList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ObjectList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tku_msgs::ObjectList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tku_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c07141cb8eb44d90e2277a09e02ec2c";
  }

  static const char* value(const ::tku_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c07141cb8eb44d9ULL;
  static const uint64_t static_value2 = 0x0e2277a09e02ec2cULL;
};

template<class ContainerAllocator>
struct DataType< ::tku_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tku_msgs/ObjectList";
  }

  static const char* value(const ::tku_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tku_msgs::ObjectList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ColorArray[] Objectlist\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/ColorArray\n"
"int32 cnt\n"
"ColorData[] Colorarray\n"
"\n"
"================================================================================\n"
"MSG: tku_msgs/ColorData\n"
"int32 X\n"
"int32 Y\n"
"int32 XMin\n"
"int32 XMax\n"
"int32 YMin\n"
"int32 YMax\n"
"int32 Width\n"
"int32 Height\n"
"int32 size                                                 \n"
;
  }

  static const char* value(const ::tku_msgs::ObjectList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tku_msgs::ObjectList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Objectlist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tku_msgs::ObjectList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tku_msgs::ObjectList_<ContainerAllocator>& v)
  {
    s << indent << "Objectlist[]" << std::endl;
    for (size_t i = 0; i < v.Objectlist.size(); ++i)
    {
      s << indent << "  Objectlist[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tku_msgs::ColorArray_<ContainerAllocator> >::stream(s, indent + "    ", v.Objectlist[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TKU_MSGS_MESSAGE_OBJECTLIST_H
