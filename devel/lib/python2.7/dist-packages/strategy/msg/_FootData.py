# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from strategy/FootData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FootData(genpy.Message):
  _md5sum = "8a34dd2dd0680c65b9684e60d7ed28ce"
  _type = "strategy/FootData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 LeftFootDistance
int16 RightFootDistance
int16 CenterFootDistance
int16 RightCenterFootDistance
int16 LeftCenterFootDistance
int16 Distance
int16 NextStairDistance
int16 LeftSlope2
int16 RightSlope2
int16 DangerLeftDistance
int16 DangerRightDistance
bool LeftSlopeFlag
bool RightSlopeFlag
bool CenterSlopeFlag
bool DangerLeftFlag
bool DangerRightFlag
bool RightFindWoodFlag
bool LeftFindWoodFlag

"""
  __slots__ = ['LeftFootDistance','RightFootDistance','CenterFootDistance','RightCenterFootDistance','LeftCenterFootDistance','Distance','NextStairDistance','LeftSlope2','RightSlope2','DangerLeftDistance','DangerRightDistance','LeftSlopeFlag','RightSlopeFlag','CenterSlopeFlag','DangerLeftFlag','DangerRightFlag','RightFindWoodFlag','LeftFindWoodFlag']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','int16','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LeftFootDistance,RightFootDistance,CenterFootDistance,RightCenterFootDistance,LeftCenterFootDistance,Distance,NextStairDistance,LeftSlope2,RightSlope2,DangerLeftDistance,DangerRightDistance,LeftSlopeFlag,RightSlopeFlag,CenterSlopeFlag,DangerLeftFlag,DangerRightFlag,RightFindWoodFlag,LeftFindWoodFlag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FootData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LeftFootDistance is None:
        self.LeftFootDistance = 0
      if self.RightFootDistance is None:
        self.RightFootDistance = 0
      if self.CenterFootDistance is None:
        self.CenterFootDistance = 0
      if self.RightCenterFootDistance is None:
        self.RightCenterFootDistance = 0
      if self.LeftCenterFootDistance is None:
        self.LeftCenterFootDistance = 0
      if self.Distance is None:
        self.Distance = 0
      if self.NextStairDistance is None:
        self.NextStairDistance = 0
      if self.LeftSlope2 is None:
        self.LeftSlope2 = 0
      if self.RightSlope2 is None:
        self.RightSlope2 = 0
      if self.DangerLeftDistance is None:
        self.DangerLeftDistance = 0
      if self.DangerRightDistance is None:
        self.DangerRightDistance = 0
      if self.LeftSlopeFlag is None:
        self.LeftSlopeFlag = False
      if self.RightSlopeFlag is None:
        self.RightSlopeFlag = False
      if self.CenterSlopeFlag is None:
        self.CenterSlopeFlag = False
      if self.DangerLeftFlag is None:
        self.DangerLeftFlag = False
      if self.DangerRightFlag is None:
        self.DangerRightFlag = False
      if self.RightFindWoodFlag is None:
        self.RightFindWoodFlag = False
      if self.LeftFindWoodFlag is None:
        self.LeftFindWoodFlag = False
    else:
      self.LeftFootDistance = 0
      self.RightFootDistance = 0
      self.CenterFootDistance = 0
      self.RightCenterFootDistance = 0
      self.LeftCenterFootDistance = 0
      self.Distance = 0
      self.NextStairDistance = 0
      self.LeftSlope2 = 0
      self.RightSlope2 = 0
      self.DangerLeftDistance = 0
      self.DangerRightDistance = 0
      self.LeftSlopeFlag = False
      self.RightSlopeFlag = False
      self.CenterSlopeFlag = False
      self.DangerLeftFlag = False
      self.DangerRightFlag = False
      self.RightFindWoodFlag = False
      self.LeftFindWoodFlag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11h7B().pack(_x.LeftFootDistance, _x.RightFootDistance, _x.CenterFootDistance, _x.RightCenterFootDistance, _x.LeftCenterFootDistance, _x.Distance, _x.NextStairDistance, _x.LeftSlope2, _x.RightSlope2, _x.DangerLeftDistance, _x.DangerRightDistance, _x.LeftSlopeFlag, _x.RightSlopeFlag, _x.CenterSlopeFlag, _x.DangerLeftFlag, _x.DangerRightFlag, _x.RightFindWoodFlag, _x.LeftFindWoodFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.LeftFootDistance, _x.RightFootDistance, _x.CenterFootDistance, _x.RightCenterFootDistance, _x.LeftCenterFootDistance, _x.Distance, _x.NextStairDistance, _x.LeftSlope2, _x.RightSlope2, _x.DangerLeftDistance, _x.DangerRightDistance, _x.LeftSlopeFlag, _x.RightSlopeFlag, _x.CenterSlopeFlag, _x.DangerLeftFlag, _x.DangerRightFlag, _x.RightFindWoodFlag, _x.LeftFindWoodFlag,) = _get_struct_11h7B().unpack(str[start:end])
      self.LeftSlopeFlag = bool(self.LeftSlopeFlag)
      self.RightSlopeFlag = bool(self.RightSlopeFlag)
      self.CenterSlopeFlag = bool(self.CenterSlopeFlag)
      self.DangerLeftFlag = bool(self.DangerLeftFlag)
      self.DangerRightFlag = bool(self.DangerRightFlag)
      self.RightFindWoodFlag = bool(self.RightFindWoodFlag)
      self.LeftFindWoodFlag = bool(self.LeftFindWoodFlag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11h7B().pack(_x.LeftFootDistance, _x.RightFootDistance, _x.CenterFootDistance, _x.RightCenterFootDistance, _x.LeftCenterFootDistance, _x.Distance, _x.NextStairDistance, _x.LeftSlope2, _x.RightSlope2, _x.DangerLeftDistance, _x.DangerRightDistance, _x.LeftSlopeFlag, _x.RightSlopeFlag, _x.CenterSlopeFlag, _x.DangerLeftFlag, _x.DangerRightFlag, _x.RightFindWoodFlag, _x.LeftFindWoodFlag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 29
      (_x.LeftFootDistance, _x.RightFootDistance, _x.CenterFootDistance, _x.RightCenterFootDistance, _x.LeftCenterFootDistance, _x.Distance, _x.NextStairDistance, _x.LeftSlope2, _x.RightSlope2, _x.DangerLeftDistance, _x.DangerRightDistance, _x.LeftSlopeFlag, _x.RightSlopeFlag, _x.CenterSlopeFlag, _x.DangerLeftFlag, _x.DangerRightFlag, _x.RightFindWoodFlag, _x.LeftFindWoodFlag,) = _get_struct_11h7B().unpack(str[start:end])
      self.LeftSlopeFlag = bool(self.LeftSlopeFlag)
      self.RightSlopeFlag = bool(self.RightSlopeFlag)
      self.CenterSlopeFlag = bool(self.CenterSlopeFlag)
      self.DangerLeftFlag = bool(self.DangerLeftFlag)
      self.DangerRightFlag = bool(self.DangerRightFlag)
      self.RightFindWoodFlag = bool(self.RightFindWoodFlag)
      self.LeftFindWoodFlag = bool(self.LeftFindWoodFlag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11h7B = None
def _get_struct_11h7B():
    global _struct_11h7B
    if _struct_11h7B is None:
        _struct_11h7B = struct.Struct("<11h7B")
    return _struct_11h7B
