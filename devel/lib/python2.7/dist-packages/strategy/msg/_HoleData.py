# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from strategy/HoleData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HoleData(genpy.Message):
  _md5sum = "380c01d203c040afdfacfd0eed390e9e"
  _type = "strategy/HoleData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool Hole_x0Flag
bool Hole_x1Flag
bool Hole_y0Flag
bool Hole_y1Flag
bool AviodHole
int16 Hole_Leftx1
int16 Hole_Rightx1
"""
  __slots__ = ['Hole_x0Flag','Hole_x1Flag','Hole_y0Flag','Hole_y1Flag','AviodHole','Hole_Leftx1','Hole_Rightx1']
  _slot_types = ['bool','bool','bool','bool','bool','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Hole_x0Flag,Hole_x1Flag,Hole_y0Flag,Hole_y1Flag,AviodHole,Hole_Leftx1,Hole_Rightx1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HoleData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Hole_x0Flag is None:
        self.Hole_x0Flag = False
      if self.Hole_x1Flag is None:
        self.Hole_x1Flag = False
      if self.Hole_y0Flag is None:
        self.Hole_y0Flag = False
      if self.Hole_y1Flag is None:
        self.Hole_y1Flag = False
      if self.AviodHole is None:
        self.AviodHole = False
      if self.Hole_Leftx1 is None:
        self.Hole_Leftx1 = 0
      if self.Hole_Rightx1 is None:
        self.Hole_Rightx1 = 0
    else:
      self.Hole_x0Flag = False
      self.Hole_x1Flag = False
      self.Hole_y0Flag = False
      self.Hole_y1Flag = False
      self.AviodHole = False
      self.Hole_Leftx1 = 0
      self.Hole_Rightx1 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5B2h().pack(_x.Hole_x0Flag, _x.Hole_x1Flag, _x.Hole_y0Flag, _x.Hole_y1Flag, _x.AviodHole, _x.Hole_Leftx1, _x.Hole_Rightx1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.Hole_x0Flag, _x.Hole_x1Flag, _x.Hole_y0Flag, _x.Hole_y1Flag, _x.AviodHole, _x.Hole_Leftx1, _x.Hole_Rightx1,) = _get_struct_5B2h().unpack(str[start:end])
      self.Hole_x0Flag = bool(self.Hole_x0Flag)
      self.Hole_x1Flag = bool(self.Hole_x1Flag)
      self.Hole_y0Flag = bool(self.Hole_y0Flag)
      self.Hole_y1Flag = bool(self.Hole_y1Flag)
      self.AviodHole = bool(self.AviodHole)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5B2h().pack(_x.Hole_x0Flag, _x.Hole_x1Flag, _x.Hole_y0Flag, _x.Hole_y1Flag, _x.AviodHole, _x.Hole_Leftx1, _x.Hole_Rightx1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.Hole_x0Flag, _x.Hole_x1Flag, _x.Hole_y0Flag, _x.Hole_y1Flag, _x.AviodHole, _x.Hole_Leftx1, _x.Hole_Rightx1,) = _get_struct_5B2h().unpack(str[start:end])
      self.Hole_x0Flag = bool(self.Hole_x0Flag)
      self.Hole_x1Flag = bool(self.Hole_x1Flag)
      self.Hole_y0Flag = bool(self.Hole_y0Flag)
      self.Hole_y1Flag = bool(self.Hole_y1Flag)
      self.AviodHole = bool(self.AviodHole)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5B2h = None
def _get_struct_5B2h():
    global _struct_5B2h
    if _struct_5B2h is None:
        _struct_5B2h = struct.Struct("<5B2h")
    return _struct_5B2h
