# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from strategy/mainData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mainData(genpy.Message):
  _md5sum = "302bbecb5f31fbfc95f35c492a80523c"
  _type = "strategy/mainData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 WhichStair
int16 HeadPostitionY
bool ifinitial
bool HeadState
bool Hardflag
bool Normalflag
bool Easyflag
"""
  __slots__ = ['WhichStair','HeadPostitionY','ifinitial','HeadState','Hardflag','Normalflag','Easyflag']
  _slot_types = ['int16','int16','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       WhichStair,HeadPostitionY,ifinitial,HeadState,Hardflag,Normalflag,Easyflag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mainData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.WhichStair is None:
        self.WhichStair = 0
      if self.HeadPostitionY is None:
        self.HeadPostitionY = 0
      if self.ifinitial is None:
        self.ifinitial = False
      if self.HeadState is None:
        self.HeadState = False
      if self.Hardflag is None:
        self.Hardflag = False
      if self.Normalflag is None:
        self.Normalflag = False
      if self.Easyflag is None:
        self.Easyflag = False
    else:
      self.WhichStair = 0
      self.HeadPostitionY = 0
      self.ifinitial = False
      self.HeadState = False
      self.Hardflag = False
      self.Normalflag = False
      self.Easyflag = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2h5B().pack(_x.WhichStair, _x.HeadPostitionY, _x.ifinitial, _x.HeadState, _x.Hardflag, _x.Normalflag, _x.Easyflag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.WhichStair, _x.HeadPostitionY, _x.ifinitial, _x.HeadState, _x.Hardflag, _x.Normalflag, _x.Easyflag,) = _get_struct_2h5B().unpack(str[start:end])
      self.ifinitial = bool(self.ifinitial)
      self.HeadState = bool(self.HeadState)
      self.Hardflag = bool(self.Hardflag)
      self.Normalflag = bool(self.Normalflag)
      self.Easyflag = bool(self.Easyflag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2h5B().pack(_x.WhichStair, _x.HeadPostitionY, _x.ifinitial, _x.HeadState, _x.Hardflag, _x.Normalflag, _x.Easyflag))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 9
      (_x.WhichStair, _x.HeadPostitionY, _x.ifinitial, _x.HeadState, _x.Hardflag, _x.Normalflag, _x.Easyflag,) = _get_struct_2h5B().unpack(str[start:end])
      self.ifinitial = bool(self.ifinitial)
      self.HeadState = bool(self.HeadState)
      self.Hardflag = bool(self.Hardflag)
      self.Normalflag = bool(self.Normalflag)
      self.Easyflag = bool(self.Easyflag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2h5B = None
def _get_struct_2h5B():
    global _struct_2h5B
    if _struct_2h5B is None:
        _struct_2h5B = struct.Struct("<2h5B")
    return _struct_2h5B
