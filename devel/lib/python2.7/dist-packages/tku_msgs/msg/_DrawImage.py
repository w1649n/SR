# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/DrawImage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DrawImage(genpy.Message):
  _md5sum = "4f46c76bfaefb605a36feaa62dd79230"
  _type = "tku_msgs/DrawImage"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 cnt
int16 Mode
int16 XMin
int16 XMax
int16 YMin
int16 YMax
int32 rValue
int32 gValue
int32 bValue
"""
  __slots__ = ['cnt','Mode','XMin','XMax','YMin','YMax','rValue','gValue','bValue']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cnt,Mode,XMin,XMax,YMin,YMax,rValue,gValue,bValue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DrawImage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cnt is None:
        self.cnt = 0
      if self.Mode is None:
        self.Mode = 0
      if self.XMin is None:
        self.XMin = 0
      if self.XMax is None:
        self.XMax = 0
      if self.YMin is None:
        self.YMin = 0
      if self.YMax is None:
        self.YMax = 0
      if self.rValue is None:
        self.rValue = 0
      if self.gValue is None:
        self.gValue = 0
      if self.bValue is None:
        self.bValue = 0
    else:
      self.cnt = 0
      self.Mode = 0
      self.XMin = 0
      self.XMax = 0
      self.YMin = 0
      self.YMax = 0
      self.rValue = 0
      self.gValue = 0
      self.bValue = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6h3i().pack(_x.cnt, _x.Mode, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.rValue, _x.gValue, _x.bValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.cnt, _x.Mode, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.rValue, _x.gValue, _x.bValue,) = _get_struct_6h3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6h3i().pack(_x.cnt, _x.Mode, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.rValue, _x.gValue, _x.bValue))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.cnt, _x.Mode, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.rValue, _x.gValue, _x.bValue,) = _get_struct_6h3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6h3i = None
def _get_struct_6h3i():
    global _struct_6h3i
    if _struct_6h3i is None:
        _struct_6h3i = struct.Struct("<6h3i")
    return _struct_6h3i
