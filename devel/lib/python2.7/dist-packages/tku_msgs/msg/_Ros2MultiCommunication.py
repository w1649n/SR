# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/Ros2MultiCommunication.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import tku_msgs.msg

class Ros2MultiCommunication(genpy.Message):
  _md5sum = "85518ba8fb2f5102548b06829ab94618"
  _type = "tku_msgs/Ros2MultiCommunication"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
CharacterInfo[] who

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: tku_msgs/CharacterInfo
string which_robot
string name
float32 x
float32 y
bool exist_flag
WitchData theta
WitchData dist
ObjectInfo[] object
ObjectInfo[] enemy

================================================================================
MSG: tku_msgs/WitchData
float32 local
float32 global

================================================================================
MSG: tku_msgs/ObjectInfo
string name
float32 x
float32 y
bool exist_flag
WitchData theta
WitchData dist
"""
  __slots__ = ['header','who']
  _slot_types = ['std_msgs/Header','tku_msgs/CharacterInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,who

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ros2MultiCommunication, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.who is None:
        self.who = []
    else:
      self.header = std_msgs.msg.Header()
      self.who = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.who)
      buff.write(_struct_I.pack(length))
      for val1 in self.who:
        _x = val1.which_robot
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v1 = val1.theta
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v2 = val1.dist
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        length = len(val1.object)
        buff.write(_struct_I.pack(length))
        for val2 in val1.object:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
          _v3 = val2.theta
          _x = _v3
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
          _v4 = val2.dist
          _x = _v4
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        length = len(val1.enemy)
        buff.write(_struct_I.pack(length))
        for val2 in val1.enemy:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
          _v5 = val2.theta
          _x = _v5
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
          _v6 = val2.dist
          _x = _v6
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.who is None:
        self.who = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.who = []
      for i in range(0, length):
        val1 = tku_msgs.msg.CharacterInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.which_robot = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.which_robot = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v7 = val1.theta
        _x = _v7
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.dist
        _x = _v8
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.object = []
        for i in range(0, length):
          val2 = tku_msgs.msg.ObjectInfo()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
          val2.exist_flag = bool(val2.exist_flag)
          _v9 = val2.theta
          _x = _v9
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          _v10 = val2.dist
          _x = _v10
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          val1.object.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.enemy = []
        for i in range(0, length):
          val2 = tku_msgs.msg.ObjectInfo()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
          val2.exist_flag = bool(val2.exist_flag)
          _v11 = val2.theta
          _x = _v11
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          _v12 = val2.dist
          _x = _v12
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          val1.enemy.append(val2)
        self.who.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.who)
      buff.write(_struct_I.pack(length))
      for val1 in self.who:
        _x = val1.which_robot
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v13 = val1.theta
        _x = _v13
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v14 = val1.dist
        _x = _v14
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        length = len(val1.object)
        buff.write(_struct_I.pack(length))
        for val2 in val1.object:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
          _v15 = val2.theta
          _x = _v15
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
          _v16 = val2.dist
          _x = _v16
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        length = len(val1.enemy)
        buff.write(_struct_I.pack(length))
        for val2 in val1.enemy:
          _x = val2.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _x = val2
          buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
          _v17 = val2.theta
          _x = _v17
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
          _v18 = val2.dist
          _x = _v18
          buff.write(_get_struct_2f().pack(_x.local, _x.global_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.who is None:
        self.who = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.who = []
      for i in range(0, length):
        val1 = tku_msgs.msg.CharacterInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.which_robot = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.which_robot = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v19 = val1.theta
        _x = _v19
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v20 = val1.dist
        _x = _v20
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.object = []
        for i in range(0, length):
          val2 = tku_msgs.msg.ObjectInfo()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
          val2.exist_flag = bool(val2.exist_flag)
          _v21 = val2.theta
          _x = _v21
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          _v22 = val2.dist
          _x = _v22
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          val1.object.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.enemy = []
        for i in range(0, length):
          val2 = tku_msgs.msg.ObjectInfo()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.name = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.name = str[start:end]
          _x = val2
          start = end
          end += 9
          (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
          val2.exist_flag = bool(val2.exist_flag)
          _v23 = val2.theta
          _x = _v23
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          _v24 = val2.dist
          _x = _v24
          start = end
          end += 8
          (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
          val1.enemy.append(val2)
        self.who.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fB = None
def _get_struct_2fB():
    global _struct_2fB
    if _struct_2fB is None:
        _struct_2fB = struct.Struct("<2fB")
    return _struct_2fB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
