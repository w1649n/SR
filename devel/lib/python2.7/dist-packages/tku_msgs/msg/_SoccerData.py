# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/SoccerData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tku_msgs.msg

class SoccerData(genpy.Message):
  _md5sum = "f053806e000580e82f90d2eca914fb02"
  _type = "tku_msgs/SoccerData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 x
int32 y
int32 height
int32 width
Distance distance
int32 object_mode

================================================================================
MSG: tku_msgs/Distance
int16 x_dis
int16 y_dis
int16 dis
"""
  __slots__ = ['x','y','height','width','distance','object_mode']
  _slot_types = ['int32','int32','int32','int32','tku_msgs/Distance','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,height,width,distance,object_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SoccerData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.distance is None:
        self.distance = tku_msgs.msg.Distance()
      if self.object_mode is None:
        self.object_mode = 0
    else:
      self.x = 0
      self.y = 0
      self.height = 0
      self.width = 0
      self.distance = tku_msgs.msg.Distance()
      self.object_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i3hi().pack(_x.x, _x.y, _x.height, _x.width, _x.distance.x_dis, _x.distance.y_dis, _x.distance.dis, _x.object_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.distance is None:
        self.distance = tku_msgs.msg.Distance()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.x, _x.y, _x.height, _x.width, _x.distance.x_dis, _x.distance.y_dis, _x.distance.dis, _x.object_mode,) = _get_struct_4i3hi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i3hi().pack(_x.x, _x.y, _x.height, _x.width, _x.distance.x_dis, _x.distance.y_dis, _x.distance.dis, _x.object_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.distance is None:
        self.distance = tku_msgs.msg.Distance()
      end = 0
      _x = self
      start = end
      end += 26
      (_x.x, _x.y, _x.height, _x.width, _x.distance.x_dis, _x.distance.y_dis, _x.distance.dis, _x.object_mode,) = _get_struct_4i3hi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i3hi = None
def _get_struct_4i3hi():
    global _struct_4i3hi
    if _struct_4i3hi is None:
        _struct_4i3hi = struct.Struct("<4i3hi")
    return _struct_4i3hi
