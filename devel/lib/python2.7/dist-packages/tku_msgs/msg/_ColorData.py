# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/ColorData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ColorData(genpy.Message):
  _md5sum = "5b2d8bae9bd6b77219cd9e9c64987ae9"
  _type = "tku_msgs/ColorData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 X
int32 Y
int32 XMin
int32 XMax
int32 YMin
int32 YMax
int32 Width
int32 Height
int32 size                                                 
"""
  __slots__ = ['X','Y','XMin','XMax','YMin','YMax','Width','Height','size']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       X,Y,XMin,XMax,YMin,YMax,Width,Height,size

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ColorData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.X is None:
        self.X = 0
      if self.Y is None:
        self.Y = 0
      if self.XMin is None:
        self.XMin = 0
      if self.XMax is None:
        self.XMax = 0
      if self.YMin is None:
        self.YMin = 0
      if self.YMax is None:
        self.YMax = 0
      if self.Width is None:
        self.Width = 0
      if self.Height is None:
        self.Height = 0
      if self.size is None:
        self.size = 0
    else:
      self.X = 0
      self.Y = 0
      self.XMin = 0
      self.XMax = 0
      self.YMin = 0
      self.YMax = 0
      self.Width = 0
      self.Height = 0
      self.size = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.X, _x.Y, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.Width, _x.Height, _x.size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.X, _x.Y, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.Width, _x.Height, _x.size,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.X, _x.Y, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.Width, _x.Height, _x.size))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.X, _x.Y, _x.XMin, _x.XMax, _x.YMin, _x.YMax, _x.Width, _x.Height, _x.size,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
