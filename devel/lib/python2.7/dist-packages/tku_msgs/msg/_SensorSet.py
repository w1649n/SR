# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/SensorSet.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorSet(genpy.Message):
  _md5sum = "e253bed9c952bfb3fc79dccea7ec39c6"
  _type = "tku_msgs/SensorSet"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 sensor_P
int32 sensor_I
int32 sensor_D
int32 Roll
int32 Pitch
int32 Yaw
int32 sup_f
int32 nsup_f
int32 sensor_modeset
"""
  __slots__ = ['sensor_P','sensor_I','sensor_D','Roll','Pitch','Yaw','sup_f','nsup_f','sensor_modeset']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sensor_P,sensor_I,sensor_D,Roll,Pitch,Yaw,sup_f,nsup_f,sensor_modeset

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorSet, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.sensor_P is None:
        self.sensor_P = 0
      if self.sensor_I is None:
        self.sensor_I = 0
      if self.sensor_D is None:
        self.sensor_D = 0
      if self.Roll is None:
        self.Roll = 0
      if self.Pitch is None:
        self.Pitch = 0
      if self.Yaw is None:
        self.Yaw = 0
      if self.sup_f is None:
        self.sup_f = 0
      if self.nsup_f is None:
        self.nsup_f = 0
      if self.sensor_modeset is None:
        self.sensor_modeset = 0
    else:
      self.sensor_P = 0
      self.sensor_I = 0
      self.sensor_D = 0
      self.Roll = 0
      self.Pitch = 0
      self.Yaw = 0
      self.sup_f = 0
      self.nsup_f = 0
      self.sensor_modeset = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.sensor_P, _x.sensor_I, _x.sensor_D, _x.Roll, _x.Pitch, _x.Yaw, _x.sup_f, _x.nsup_f, _x.sensor_modeset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.sensor_P, _x.sensor_I, _x.sensor_D, _x.Roll, _x.Pitch, _x.Yaw, _x.sup_f, _x.nsup_f, _x.sensor_modeset,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9i().pack(_x.sensor_P, _x.sensor_I, _x.sensor_D, _x.Roll, _x.Pitch, _x.Yaw, _x.sup_f, _x.nsup_f, _x.sensor_modeset))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.sensor_P, _x.sensor_I, _x.sensor_D, _x.Roll, _x.Pitch, _x.Yaw, _x.sup_f, _x.nsup_f, _x.sensor_modeset,) = _get_struct_9i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9i = None
def _get_struct_9i():
    global _struct_9i
    if _struct_9i is None:
        _struct_9i = struct.Struct("<9i")
    return _struct_9i
