# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/CharacterInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tku_msgs.msg

class CharacterInfo(genpy.Message):
  _md5sum = "291b746588435b1a71d12e22c696f64a"
  _type = "tku_msgs/CharacterInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string which_robot
string name
float32 x
float32 y
bool exist_flag
WitchData theta
WitchData dist
ObjectInfo[] object
ObjectInfo[] enemy

================================================================================
MSG: tku_msgs/WitchData
float32 local
float32 global

================================================================================
MSG: tku_msgs/ObjectInfo
string name
float32 x
float32 y
bool exist_flag
WitchData theta
WitchData dist
"""
  __slots__ = ['which_robot','name','x','y','exist_flag','theta','dist','object','enemy']
  _slot_types = ['string','string','float32','float32','bool','tku_msgs/WitchData','tku_msgs/WitchData','tku_msgs/ObjectInfo[]','tku_msgs/ObjectInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       which_robot,name,x,y,exist_flag,theta,dist,object,enemy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CharacterInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.which_robot is None:
        self.which_robot = ''
      if self.name is None:
        self.name = ''
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.exist_flag is None:
        self.exist_flag = False
      if self.theta is None:
        self.theta = tku_msgs.msg.WitchData()
      if self.dist is None:
        self.dist = tku_msgs.msg.WitchData()
      if self.object is None:
        self.object = []
      if self.enemy is None:
        self.enemy = []
    else:
      self.which_robot = ''
      self.name = ''
      self.x = 0.
      self.y = 0.
      self.exist_flag = False
      self.theta = tku_msgs.msg.WitchData()
      self.dist = tku_msgs.msg.WitchData()
      self.object = []
      self.enemy = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.which_robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fB4f().pack(_x.x, _x.y, _x.exist_flag, _x.theta.local, _x.theta.global_, _x.dist.local, _x.dist.global_))
      length = len(self.object)
      buff.write(_struct_I.pack(length))
      for val1 in self.object:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v1 = val1.theta
        _x = _v1
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v2 = val1.dist
        _x = _v2
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
      length = len(self.enemy)
      buff.write(_struct_I.pack(length))
      for val1 in self.enemy:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v3 = val1.theta
        _x = _v3
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v4 = val1.dist
        _x = _v4
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.theta is None:
        self.theta = tku_msgs.msg.WitchData()
      if self.dist is None:
        self.dist = tku_msgs.msg.WitchData()
      if self.object is None:
        self.object = None
      if self.enemy is None:
        self.enemy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.which_robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.which_robot = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.exist_flag, _x.theta.local, _x.theta.global_, _x.dist.local, _x.dist.global_,) = _get_struct_2fB4f().unpack(str[start:end])
      self.exist_flag = bool(self.exist_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object = []
      for i in range(0, length):
        val1 = tku_msgs.msg.ObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v5 = val1.theta
        _x = _v5
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v6 = val1.dist
        _x = _v6
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        self.object.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.enemy = []
      for i in range(0, length):
        val1 = tku_msgs.msg.ObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v7 = val1.theta
        _x = _v7
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v8 = val1.dist
        _x = _v8
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        self.enemy.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.which_robot
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fB4f().pack(_x.x, _x.y, _x.exist_flag, _x.theta.local, _x.theta.global_, _x.dist.local, _x.dist.global_))
      length = len(self.object)
      buff.write(_struct_I.pack(length))
      for val1 in self.object:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v9 = val1.theta
        _x = _v9
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v10 = val1.dist
        _x = _v10
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
      length = len(self.enemy)
      buff.write(_struct_I.pack(length))
      for val1 in self.enemy:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2fB().pack(_x.x, _x.y, _x.exist_flag))
        _v11 = val1.theta
        _x = _v11
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
        _v12 = val1.dist
        _x = _v12
        buff.write(_get_struct_2f().pack(_x.local, _x.global_))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.theta is None:
        self.theta = tku_msgs.msg.WitchData()
      if self.dist is None:
        self.dist = tku_msgs.msg.WitchData()
      if self.object is None:
        self.object = None
      if self.enemy is None:
        self.enemy = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.which_robot = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.which_robot = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 25
      (_x.x, _x.y, _x.exist_flag, _x.theta.local, _x.theta.global_, _x.dist.local, _x.dist.global_,) = _get_struct_2fB4f().unpack(str[start:end])
      self.exist_flag = bool(self.exist_flag)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.object = []
      for i in range(0, length):
        val1 = tku_msgs.msg.ObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v13 = val1.theta
        _x = _v13
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v14 = val1.dist
        _x = _v14
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        self.object.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.enemy = []
      for i in range(0, length):
        val1 = tku_msgs.msg.ObjectInfo()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.x, _x.y, _x.exist_flag,) = _get_struct_2fB().unpack(str[start:end])
        val1.exist_flag = bool(val1.exist_flag)
        _v15 = val1.theta
        _x = _v15
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        _v16 = val1.dist
        _x = _v16
        start = end
        end += 8
        (_x.local, _x.global_,) = _get_struct_2f().unpack(str[start:end])
        self.enemy.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2fB = None
def _get_struct_2fB():
    global _struct_2fB
    if _struct_2fB is None:
        _struct_2fB = struct.Struct("<2fB")
    return _struct_2fB
_struct_2fB4f = None
def _get_struct_2fB4f():
    global _struct_2fB4f
    if _struct_2fB4f is None:
        _struct_2fB4f = struct.Struct("<2fB4f")
    return _struct_2fB4f
