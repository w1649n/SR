# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/wavelist.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tku_msgs.msg

class wavelist(genpy.Message):
  _md5sum = "171c41386923a260960e1449234f31a2"
  _type = "tku_msgs/wavelist"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """wave[] wavelist
================================================================================
MSG: tku_msgs/wave
float32 R_move_X
float32 L_move_X
float32 R_move_Y
float32 L_move_Y
float32 R_move_Z
float32 L_move_Z
float32 move_COM_X
float32 move_COM_Y
float32 move_COM_Z
float32 R_Thta
float32 L_Thta
int32 Point

"""
  __slots__ = ['wavelist']
  _slot_types = ['tku_msgs/wave[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       wavelist

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(wavelist, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.wavelist is None:
        self.wavelist = []
    else:
      self.wavelist = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.wavelist)
      buff.write(_struct_I.pack(length))
      for val1 in self.wavelist:
        _x = val1
        buff.write(_get_struct_11fi().pack(_x.R_move_X, _x.L_move_X, _x.R_move_Y, _x.L_move_Y, _x.R_move_Z, _x.L_move_Z, _x.move_COM_X, _x.move_COM_Y, _x.move_COM_Z, _x.R_Thta, _x.L_Thta, _x.Point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wavelist is None:
        self.wavelist = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wavelist = []
      for i in range(0, length):
        val1 = tku_msgs.msg.wave()
        _x = val1
        start = end
        end += 48
        (_x.R_move_X, _x.L_move_X, _x.R_move_Y, _x.L_move_Y, _x.R_move_Z, _x.L_move_Z, _x.move_COM_X, _x.move_COM_Y, _x.move_COM_Z, _x.R_Thta, _x.L_Thta, _x.Point,) = _get_struct_11fi().unpack(str[start:end])
        self.wavelist.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.wavelist)
      buff.write(_struct_I.pack(length))
      for val1 in self.wavelist:
        _x = val1
        buff.write(_get_struct_11fi().pack(_x.R_move_X, _x.L_move_X, _x.R_move_Y, _x.L_move_Y, _x.R_move_Z, _x.L_move_Z, _x.move_COM_X, _x.move_COM_Y, _x.move_COM_Z, _x.R_Thta, _x.L_Thta, _x.Point))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.wavelist is None:
        self.wavelist = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.wavelist = []
      for i in range(0, length):
        val1 = tku_msgs.msg.wave()
        _x = val1
        start = end
        end += 48
        (_x.R_move_X, _x.L_move_X, _x.R_move_Y, _x.L_move_Y, _x.R_move_Z, _x.L_move_Z, _x.move_COM_X, _x.move_COM_Y, _x.move_COM_Z, _x.R_Thta, _x.L_Thta, _x.Point,) = _get_struct_11fi().unpack(str[start:end])
        self.wavelist.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11fi = None
def _get_struct_11fi():
    global _struct_11fi
    if _struct_11fi is None:
        _struct_11fi = struct.Struct("<11fi")
    return _struct_11fi
