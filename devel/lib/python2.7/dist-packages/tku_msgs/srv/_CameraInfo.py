# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/CameraInfoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraInfoRequest(genpy.Message):
  _md5sum = "2a0ee7dd7db7d3262047f4747a0d46cc"
  _type = "tku_msgs/CameraInfoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool Load
"""
  __slots__ = ['Load']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Load

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraInfoRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Load is None:
        self.Load = False
    else:
      self.Load = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.Load
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.Load,) = _get_struct_B().unpack(str[start:end])
      self.Load = bool(self.Load)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.Load
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.Load,) = _get_struct_B().unpack(str[start:end])
      self.Load = bool(self.Load)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tku_msgs/CameraInfoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CameraInfoResponse(genpy.Message):
  _md5sum = "470ab9ddf45fde352de26f5b10fb9a47"
  _type = "tku_msgs/CameraInfoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 brightness
int32 contrast
int32 saturation
int32 white_balance
bool auto_white_balance
bool auto_exposure
bool auto_Backlight_Compensation
"""
  __slots__ = ['brightness','contrast','saturation','white_balance','auto_white_balance','auto_exposure','auto_Backlight_Compensation']
  _slot_types = ['int32','int32','int32','int32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       brightness,contrast,saturation,white_balance,auto_white_balance,auto_exposure,auto_Backlight_Compensation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraInfoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.brightness is None:
        self.brightness = 0
      if self.contrast is None:
        self.contrast = 0
      if self.saturation is None:
        self.saturation = 0
      if self.white_balance is None:
        self.white_balance = 0
      if self.auto_white_balance is None:
        self.auto_white_balance = False
      if self.auto_exposure is None:
        self.auto_exposure = False
      if self.auto_Backlight_Compensation is None:
        self.auto_Backlight_Compensation = False
    else:
      self.brightness = 0
      self.contrast = 0
      self.saturation = 0
      self.white_balance = 0
      self.auto_white_balance = False
      self.auto_exposure = False
      self.auto_Backlight_Compensation = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i3B().pack(_x.brightness, _x.contrast, _x.saturation, _x.white_balance, _x.auto_white_balance, _x.auto_exposure, _x.auto_Backlight_Compensation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.brightness, _x.contrast, _x.saturation, _x.white_balance, _x.auto_white_balance, _x.auto_exposure, _x.auto_Backlight_Compensation,) = _get_struct_4i3B().unpack(str[start:end])
      self.auto_white_balance = bool(self.auto_white_balance)
      self.auto_exposure = bool(self.auto_exposure)
      self.auto_Backlight_Compensation = bool(self.auto_Backlight_Compensation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i3B().pack(_x.brightness, _x.contrast, _x.saturation, _x.white_balance, _x.auto_white_balance, _x.auto_exposure, _x.auto_Backlight_Compensation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.brightness, _x.contrast, _x.saturation, _x.white_balance, _x.auto_white_balance, _x.auto_exposure, _x.auto_Backlight_Compensation,) = _get_struct_4i3B().unpack(str[start:end])
      self.auto_white_balance = bool(self.auto_white_balance)
      self.auto_exposure = bool(self.auto_exposure)
      self.auto_Backlight_Compensation = bool(self.auto_Backlight_Compensation)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i3B = None
def _get_struct_4i3B():
    global _struct_4i3B
    if _struct_4i3B is None:
        _struct_4i3B = struct.Struct("<4i3B")
    return _struct_4i3B
class CameraInfo(object):
  _type          = 'tku_msgs/CameraInfo'
  _md5sum = '5d903b0ce533a144da9c4015f43ae098'
  _request_class  = CameraInfoRequest
  _response_class = CameraInfoResponse
